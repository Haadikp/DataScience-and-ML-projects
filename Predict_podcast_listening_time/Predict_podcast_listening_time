{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6bd14d52",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:26.369157Z",
     "iopub.status.busy": "2025-09-22T14:58:26.368934Z",
     "iopub.status.idle": "2025-09-22T14:58:28.300374Z",
     "shell.execute_reply": "2025-09-22T14:58:28.299531Z"
    },
    "papermill": {
     "duration": 1.942321,
     "end_time": "2025-09-22T14:58:28.301791",
     "exception": false,
     "start_time": "2025-09-22T14:58:26.359470",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/predict-podcast-listening-time/sample_submission.csv\n",
      "/kaggle/input/predict-podcast-listening-time/train.csv\n",
      "/kaggle/input/predict-podcast-listening-time/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "38910e9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:28.319887Z",
     "iopub.status.busy": "2025-09-22T14:58:28.319258Z",
     "iopub.status.idle": "2025-09-22T14:58:30.706780Z",
     "shell.execute_reply": "2025-09-22T14:58:30.706190Z"
    },
    "papermill": {
     "duration": 2.397767,
     "end_time": "2025-09-22T14:58:30.708105",
     "exception": false,
     "start_time": "2025-09-22T14:58:28.310338",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv(\"/kaggle/input/predict-podcast-listening-time/train.csv\")\n",
    "test = pd.read_csv(\"/kaggle/input/predict-podcast-listening-time/test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8138fbc6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:30.725027Z",
     "iopub.status.busy": "2025-09-22T14:58:30.724833Z",
     "iopub.status.idle": "2025-09-22T14:58:30.753871Z",
     "shell.execute_reply": "2025-09-22T14:58:30.753022Z"
    },
    "papermill": {
     "duration": 0.03888,
     "end_time": "2025-09-22T14:58:30.754980",
     "exception": false,
     "start_time": "2025-09-22T14:58:30.716100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Podcast_Name</th>\n",
       "      <th>Episode_Title</th>\n",
       "      <th>Episode_Length_minutes</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Host_Popularity_percentage</th>\n",
       "      <th>Publication_Day</th>\n",
       "      <th>Publication_Time</th>\n",
       "      <th>Guest_Popularity_percentage</th>\n",
       "      <th>Number_of_Ads</th>\n",
       "      <th>Episode_Sentiment</th>\n",
       "      <th>Listening_Time_minutes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Mystery Matters</td>\n",
       "      <td>Episode 98</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True Crime</td>\n",
       "      <td>74.81</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>Night</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Positive</td>\n",
       "      <td>31.41998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Joke Junction</td>\n",
       "      <td>Episode 26</td>\n",
       "      <td>119.80</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>66.95</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>75.95</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Negative</td>\n",
       "      <td>88.01241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Study Sessions</td>\n",
       "      <td>Episode 16</td>\n",
       "      <td>73.90</td>\n",
       "      <td>Education</td>\n",
       "      <td>69.97</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>Evening</td>\n",
       "      <td>8.97</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Negative</td>\n",
       "      <td>44.92531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Digital Digest</td>\n",
       "      <td>Episode 45</td>\n",
       "      <td>67.17</td>\n",
       "      <td>Technology</td>\n",
       "      <td>57.22</td>\n",
       "      <td>Monday</td>\n",
       "      <td>Morning</td>\n",
       "      <td>78.70</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Positive</td>\n",
       "      <td>46.27824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Mind &amp; Body</td>\n",
       "      <td>Episode 86</td>\n",
       "      <td>110.51</td>\n",
       "      <td>Health</td>\n",
       "      <td>80.07</td>\n",
       "      <td>Monday</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>58.68</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>75.61031</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id     Podcast_Name Episode_Title  Episode_Length_minutes       Genre  \\\n",
       "0   0  Mystery Matters    Episode 98                     NaN  True Crime   \n",
       "1   1    Joke Junction    Episode 26                  119.80      Comedy   \n",
       "2   2   Study Sessions    Episode 16                   73.90   Education   \n",
       "3   3   Digital Digest    Episode 45                   67.17  Technology   \n",
       "4   4      Mind & Body    Episode 86                  110.51      Health   \n",
       "\n",
       "   Host_Popularity_percentage Publication_Day Publication_Time  \\\n",
       "0                       74.81        Thursday            Night   \n",
       "1                       66.95        Saturday        Afternoon   \n",
       "2                       69.97         Tuesday          Evening   \n",
       "3                       57.22          Monday          Morning   \n",
       "4                       80.07          Monday        Afternoon   \n",
       "\n",
       "   Guest_Popularity_percentage  Number_of_Ads Episode_Sentiment  \\\n",
       "0                          NaN            0.0          Positive   \n",
       "1                        75.95            2.0          Negative   \n",
       "2                         8.97            0.0          Negative   \n",
       "3                        78.70            2.0          Positive   \n",
       "4                        58.68            3.0           Neutral   \n",
       "\n",
       "   Listening_Time_minutes  \n",
       "0                31.41998  \n",
       "1                88.01241  \n",
       "2                44.92531  \n",
       "3                46.27824  \n",
       "4                75.61031  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6600acfd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:30.771954Z",
     "iopub.status.busy": "2025-09-22T14:58:30.771744Z",
     "iopub.status.idle": "2025-09-22T14:58:31.022561Z",
     "shell.execute_reply": "2025-09-22T14:58:31.021466Z"
    },
    "papermill": {
     "duration": 0.260358,
     "end_time": "2025-09-22T14:58:31.023889",
     "exception": false,
     "start_time": "2025-09-22T14:58:30.763531",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 750000 entries, 0 to 749999\n",
      "Data columns (total 12 columns):\n",
      " #   Column                       Non-Null Count   Dtype  \n",
      "---  ------                       --------------   -----  \n",
      " 0   id                           750000 non-null  int64  \n",
      " 1   Podcast_Name                 750000 non-null  object \n",
      " 2   Episode_Title                750000 non-null  object \n",
      " 3   Episode_Length_minutes       662907 non-null  float64\n",
      " 4   Genre                        750000 non-null  object \n",
      " 5   Host_Popularity_percentage   750000 non-null  float64\n",
      " 6   Publication_Day              750000 non-null  object \n",
      " 7   Publication_Time             750000 non-null  object \n",
      " 8   Guest_Popularity_percentage  603970 non-null  float64\n",
      " 9   Number_of_Ads                749999 non-null  float64\n",
      " 10  Episode_Sentiment            750000 non-null  object \n",
      " 11  Listening_Time_minutes       750000 non-null  float64\n",
      "dtypes: float64(5), int64(1), object(6)\n",
      "memory usage: 68.7+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0dddea79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:31.043085Z",
     "iopub.status.busy": "2025-09-22T14:58:31.042817Z",
     "iopub.status.idle": "2025-09-22T14:58:31.125567Z",
     "shell.execute_reply": "2025-09-22T14:58:31.124617Z"
    },
    "papermill": {
     "duration": 0.093609,
     "end_time": "2025-09-22T14:58:31.126821",
     "exception": false,
     "start_time": "2025-09-22T14:58:31.033212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 250000 entries, 0 to 249999\n",
      "Data columns (total 11 columns):\n",
      " #   Column                       Non-Null Count   Dtype  \n",
      "---  ------                       --------------   -----  \n",
      " 0   id                           250000 non-null  int64  \n",
      " 1   Podcast_Name                 250000 non-null  object \n",
      " 2   Episode_Title                250000 non-null  object \n",
      " 3   Episode_Length_minutes       221264 non-null  float64\n",
      " 4   Genre                        250000 non-null  object \n",
      " 5   Host_Popularity_percentage   250000 non-null  float64\n",
      " 6   Publication_Day              250000 non-null  object \n",
      " 7   Publication_Time             250000 non-null  object \n",
      " 8   Guest_Popularity_percentage  201168 non-null  float64\n",
      " 9   Number_of_Ads                250000 non-null  float64\n",
      " 10  Episode_Sentiment            250000 non-null  object \n",
      "dtypes: float64(4), int64(1), object(6)\n",
      "memory usage: 21.0+ MB\n"
     ]
    }
   ],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a03d62d8",
   "metadata": {
    "papermill": {
     "duration": 0.008821,
     "end_time": "2025-09-22T14:58:31.144601",
     "exception": false,
     "start_time": "2025-09-22T14:58:31.135780",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Create Y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9058e9e3",
   "metadata": {
    "papermill": {
     "duration": 0.008757,
     "end_time": "2025-09-22T14:58:31.162051",
     "exception": false,
     "start_time": "2025-09-22T14:58:31.153294",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "*Listening_Time_minutes* is out target, so we assign this to y variable and remove from train data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7aea8178",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:31.180832Z",
     "iopub.status.busy": "2025-09-22T14:58:31.180343Z",
     "iopub.status.idle": "2025-09-22T14:58:31.185453Z",
     "shell.execute_reply": "2025-09-22T14:58:31.184802Z"
    },
    "papermill": {
     "duration": 0.015731,
     "end_time": "2025-09-22T14:58:31.186567",
     "exception": false,
     "start_time": "2025-09-22T14:58:31.170836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    31.41998\n",
       "1    88.01241\n",
       "2    44.92531\n",
       "3    46.27824\n",
       "4    75.61031\n",
       "Name: Listening_Time_minutes, dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = train['Listening_Time_minutes']\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "49380d6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:31.204111Z",
     "iopub.status.busy": "2025-09-22T14:58:31.203926Z",
     "iopub.status.idle": "2025-09-22T14:58:33.730942Z",
     "shell.execute_reply": "2025-09-22T14:58:33.730428Z"
    },
    "papermill": {
     "duration": 2.537206,
     "end_time": "2025-09-22T14:58:33.732213",
     "exception": false,
     "start_time": "2025-09-22T14:58:31.195007",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# sns.pairplot(train)\n",
    "# plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79e74907",
   "metadata": {
    "papermill": {
     "duration": 0.007724,
     "end_time": "2025-09-22T14:58:33.748398",
     "exception": false,
     "start_time": "2025-09-22T14:58:33.740674",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We can see some columns are not shown here becuase pairplot is designed to visualize pairwise relationships in a dataset, and it primarily focuses on numerical columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bd398f1e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:33.764657Z",
     "iopub.status.busy": "2025-09-22T14:58:33.764296Z",
     "iopub.status.idle": "2025-09-22T14:58:33.769239Z",
     "shell.execute_reply": "2025-09-22T14:58:33.768727Z"
    },
    "papermill": {
     "duration": 0.014161,
     "end_time": "2025-09-22T14:58:33.770222",
     "exception": false,
     "start_time": "2025-09-22T14:58:33.756061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'Podcast_Name', 'Episode_Title', 'Episode_Length_minutes',\n",
       "       'Genre', 'Host_Popularity_percentage', 'Publication_Day',\n",
       "       'Publication_Time', 'Guest_Popularity_percentage', 'Number_of_Ads',\n",
       "       'Episode_Sentiment', 'Listening_Time_minutes'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "23bf1540",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:33.786708Z",
     "iopub.status.busy": "2025-09-22T14:58:33.786514Z",
     "iopub.status.idle": "2025-09-22T14:58:34.438716Z",
     "shell.execute_reply": "2025-09-22T14:58:34.438123Z"
    },
    "papermill": {
     "duration": 0.66178,
     "end_time": "2025-09-22T14:58:34.439998",
     "exception": false,
     "start_time": "2025-09-22T14:58:33.778218",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['Episode_Number'] =  train['Episode_Title'].str.extract(r'Episode (\\d+)',expand=False).astype('Int64')\n",
    "test['Episode_Number'] =  test['Episode_Title'].str.extract(r'Episode (\\d+)',expand=False).astype('Int64')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "684082ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:34.457553Z",
     "iopub.status.busy": "2025-09-22T14:58:34.457256Z",
     "iopub.status.idle": "2025-09-22T14:58:34.470182Z",
     "shell.execute_reply": "2025-09-22T14:58:34.469560Z"
    },
    "papermill": {
     "duration": 0.022904,
     "end_time": "2025-09-22T14:58:34.471246",
     "exception": false,
     "start_time": "2025-09-22T14:58:34.448342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Podcast_Name</th>\n",
       "      <th>Episode_Title</th>\n",
       "      <th>Episode_Length_minutes</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Host_Popularity_percentage</th>\n",
       "      <th>Publication_Day</th>\n",
       "      <th>Publication_Time</th>\n",
       "      <th>Guest_Popularity_percentage</th>\n",
       "      <th>Number_of_Ads</th>\n",
       "      <th>Episode_Sentiment</th>\n",
       "      <th>Listening_Time_minutes</th>\n",
       "      <th>Episode_Number</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Mystery Matters</td>\n",
       "      <td>Episode 98</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True Crime</td>\n",
       "      <td>74.81</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>Night</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Positive</td>\n",
       "      <td>31.41998</td>\n",
       "      <td>98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Joke Junction</td>\n",
       "      <td>Episode 26</td>\n",
       "      <td>119.80</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>66.95</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>75.95</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Negative</td>\n",
       "      <td>88.01241</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Study Sessions</td>\n",
       "      <td>Episode 16</td>\n",
       "      <td>73.90</td>\n",
       "      <td>Education</td>\n",
       "      <td>69.97</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>Evening</td>\n",
       "      <td>8.97</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Negative</td>\n",
       "      <td>44.92531</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Digital Digest</td>\n",
       "      <td>Episode 45</td>\n",
       "      <td>67.17</td>\n",
       "      <td>Technology</td>\n",
       "      <td>57.22</td>\n",
       "      <td>Monday</td>\n",
       "      <td>Morning</td>\n",
       "      <td>78.70</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Positive</td>\n",
       "      <td>46.27824</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Mind &amp; Body</td>\n",
       "      <td>Episode 86</td>\n",
       "      <td>110.51</td>\n",
       "      <td>Health</td>\n",
       "      <td>80.07</td>\n",
       "      <td>Monday</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>58.68</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>75.61031</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id     Podcast_Name Episode_Title  Episode_Length_minutes       Genre  \\\n",
       "0   0  Mystery Matters    Episode 98                     NaN  True Crime   \n",
       "1   1    Joke Junction    Episode 26                  119.80      Comedy   \n",
       "2   2   Study Sessions    Episode 16                   73.90   Education   \n",
       "3   3   Digital Digest    Episode 45                   67.17  Technology   \n",
       "4   4      Mind & Body    Episode 86                  110.51      Health   \n",
       "\n",
       "   Host_Popularity_percentage Publication_Day Publication_Time  \\\n",
       "0                       74.81        Thursday            Night   \n",
       "1                       66.95        Saturday        Afternoon   \n",
       "2                       69.97         Tuesday          Evening   \n",
       "3                       57.22          Monday          Morning   \n",
       "4                       80.07          Monday        Afternoon   \n",
       "\n",
       "   Guest_Popularity_percentage  Number_of_Ads Episode_Sentiment  \\\n",
       "0                          NaN            0.0          Positive   \n",
       "1                        75.95            2.0          Negative   \n",
       "2                         8.97            0.0          Negative   \n",
       "3                        78.70            2.0          Positive   \n",
       "4                        58.68            3.0           Neutral   \n",
       "\n",
       "   Listening_Time_minutes  Episode_Number  \n",
       "0                31.41998              98  \n",
       "1                88.01241              26  \n",
       "2                44.92531              16  \n",
       "3                46.27824              45  \n",
       "4                75.61031              86  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "eee99268",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:34.488131Z",
     "iopub.status.busy": "2025-09-22T14:58:34.487936Z",
     "iopub.status.idle": "2025-09-22T14:58:34.502521Z",
     "shell.execute_reply": "2025-09-22T14:58:34.498957Z"
    },
    "papermill": {
     "duration": 0.026657,
     "end_time": "2025-09-22T14:58:34.506072",
     "exception": false,
     "start_time": "2025-09-22T14:58:34.479415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Podcast_Name</th>\n",
       "      <th>Episode_Title</th>\n",
       "      <th>Episode_Length_minutes</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Host_Popularity_percentage</th>\n",
       "      <th>Publication_Day</th>\n",
       "      <th>Publication_Time</th>\n",
       "      <th>Guest_Popularity_percentage</th>\n",
       "      <th>Number_of_Ads</th>\n",
       "      <th>Episode_Sentiment</th>\n",
       "      <th>Episode_Number</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>750000</td>\n",
       "      <td>Educational Nuggets</td>\n",
       "      <td>Episode 73</td>\n",
       "      <td>78.96</td>\n",
       "      <td>Education</td>\n",
       "      <td>38.11</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>Evening</td>\n",
       "      <td>53.33</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>750001</td>\n",
       "      <td>Sound Waves</td>\n",
       "      <td>Episode 23</td>\n",
       "      <td>27.87</td>\n",
       "      <td>Music</td>\n",
       "      <td>71.29</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>Morning</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>750002</td>\n",
       "      <td>Joke Junction</td>\n",
       "      <td>Episode 11</td>\n",
       "      <td>69.10</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>67.89</td>\n",
       "      <td>Friday</td>\n",
       "      <td>Evening</td>\n",
       "      <td>97.51</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Positive</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>750003</td>\n",
       "      <td>Comedy Corner</td>\n",
       "      <td>Episode 73</td>\n",
       "      <td>115.39</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>23.40</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>Morning</td>\n",
       "      <td>51.75</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Positive</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>750004</td>\n",
       "      <td>Life Lessons</td>\n",
       "      <td>Episode 50</td>\n",
       "      <td>72.32</td>\n",
       "      <td>Lifestyle</td>\n",
       "      <td>58.10</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>Morning</td>\n",
       "      <td>11.30</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id         Podcast_Name Episode_Title  Episode_Length_minutes  \\\n",
       "0  750000  Educational Nuggets    Episode 73                   78.96   \n",
       "1  750001          Sound Waves    Episode 23                   27.87   \n",
       "2  750002        Joke Junction    Episode 11                   69.10   \n",
       "3  750003        Comedy Corner    Episode 73                  115.39   \n",
       "4  750004         Life Lessons    Episode 50                   72.32   \n",
       "\n",
       "       Genre  Host_Popularity_percentage Publication_Day Publication_Time  \\\n",
       "0  Education                       38.11        Saturday          Evening   \n",
       "1      Music                       71.29          Sunday          Morning   \n",
       "2     Comedy                       67.89          Friday          Evening   \n",
       "3     Comedy                       23.40          Sunday          Morning   \n",
       "4  Lifestyle                       58.10       Wednesday          Morning   \n",
       "\n",
       "   Guest_Popularity_percentage  Number_of_Ads Episode_Sentiment  \\\n",
       "0                        53.33            1.0           Neutral   \n",
       "1                          NaN            0.0           Neutral   \n",
       "2                        97.51            0.0          Positive   \n",
       "3                        51.75            2.0          Positive   \n",
       "4                        11.30            2.0           Neutral   \n",
       "\n",
       "   Episode_Number  \n",
       "0              73  \n",
       "1              23  \n",
       "2              11  \n",
       "3              73  \n",
       "4              50  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6759fa82",
   "metadata": {
    "papermill": {
     "duration": 0.00831,
     "end_time": "2025-09-22T14:58:34.523535",
     "exception": false,
     "start_time": "2025-09-22T14:58:34.515225",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# We have to convert categorical data into numerical data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a5969753",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:34.583145Z",
     "iopub.status.busy": "2025-09-22T14:58:34.582631Z",
     "iopub.status.idle": "2025-09-22T14:58:34.587384Z",
     "shell.execute_reply": "2025-09-22T14:58:34.586581Z"
    },
    "papermill": {
     "duration": 0.015156,
     "end_time": "2025-09-22T14:58:34.588568",
     "exception": false,
     "start_time": "2025-09-22T14:58:34.573412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The columns with categorical data are : ['Podcast_Name', 'Episode_Title', 'Genre', 'Publication_Day', 'Publication_Time', 'Episode_Sentiment']\n"
     ]
    }
   ],
   "source": [
    "col = (train.dtypes == 'object')\n",
    "object_cols = list(col[col].index)\n",
    "\n",
    "print(f\"The columns with categorical data are : {object_cols}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "554a0d35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:34.606397Z",
     "iopub.status.busy": "2025-09-22T14:58:34.606166Z",
     "iopub.status.idle": "2025-09-22T14:58:34.683111Z",
     "shell.execute_reply": "2025-09-22T14:58:34.682339Z"
    },
    "papermill": {
     "duration": 0.087204,
     "end_time": "2025-09-22T14:58:34.684297",
     "exception": false,
     "start_time": "2025-09-22T14:58:34.597093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The 10 categories in Genre are : ['True Crime', 'Comedy', 'Education', 'Technology', 'Health', 'News', 'Music', 'Sports', 'Business', 'Lifestyle']\n"
     ]
    }
   ],
   "source": [
    "genre = list(train['Genre'].unique())\n",
    "print(f\"The {train['Genre'].nunique()} categories in Genre are : {genre}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "72b25ae2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:34.703123Z",
     "iopub.status.busy": "2025-09-22T14:58:34.702925Z",
     "iopub.status.idle": "2025-09-22T14:58:34.747807Z",
     "shell.execute_reply": "2025-09-22T14:58:34.747287Z"
    },
    "papermill": {
     "duration": 0.055662,
     "end_time": "2025-09-22T14:58:34.748805",
     "exception": false,
     "start_time": "2025-09-22T14:58:34.693143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Mystery Matters', 'Joke Junction', 'Study Sessions',\n",
       "       'Digital Digest', 'Mind & Body', 'Fitness First', 'Criminal Minds',\n",
       "       'News Roundup', 'Daily Digest', 'Music Matters', 'Sports Central',\n",
       "       'Melody Mix', 'Game Day', 'Gadget Geek', 'Global News',\n",
       "       'Tech Talks', 'Sport Spot', 'Funny Folks', 'Sports Weekly',\n",
       "       'Business Briefs', 'Tech Trends', 'Innovators', 'Health Hour',\n",
       "       'Comedy Corner', 'Sound Waves', 'Brain Boost', \"Athlete's Arena\",\n",
       "       'Wellness Wave', 'Style Guide', 'World Watch', 'Humor Hub',\n",
       "       'Money Matters', 'Healthy Living', 'Home & Living',\n",
       "       'Educational Nuggets', 'Market Masters', 'Learning Lab',\n",
       "       'Lifestyle Lounge', 'Crime Chronicles', 'Detective Diaries',\n",
       "       'Life Lessons', 'Current Affairs', 'Finance Focus', 'Laugh Line',\n",
       "       'True Crime Stories', 'Business Insights', 'Fashion Forward',\n",
       "       'Tune Time'], dtype=object)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Podcast_Name'].unique()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "8792c18d",
   "metadata": {
    "papermill": {
     "duration": 0.008867,
     "end_time": "2025-09-22T14:58:34.766420",
     "exception": false,
     "start_time": "2025-09-22T14:58:34.757553",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "59e8e8da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:34.784589Z",
     "iopub.status.busy": "2025-09-22T14:58:34.784103Z",
     "iopub.status.idle": "2025-09-22T14:58:36.351208Z",
     "shell.execute_reply": "2025-09-22T14:58:36.350367Z"
    },
    "papermill": {
     "duration": 1.577409,
     "end_time": "2025-09-22T14:58:36.352504",
     "exception": false,
     "start_time": "2025-09-22T14:58:34.775095",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Podcast_Name</th>\n",
       "      <th>Episode_Title</th>\n",
       "      <th>Episode_Length_minutes</th>\n",
       "      <th>Host_Popularity_percentage</th>\n",
       "      <th>Publication_Day</th>\n",
       "      <th>Publication_Time</th>\n",
       "      <th>Guest_Popularity_percentage</th>\n",
       "      <th>Number_of_Ads</th>\n",
       "      <th>Episode_Sentiment</th>\n",
       "      <th>Listening_Time_minutes</th>\n",
       "      <th>Episode_Number</th>\n",
       "      <th>Genre_TE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Mystery Matters</td>\n",
       "      <td>Episode 98</td>\n",
       "      <td>NaN</td>\n",
       "      <td>74.81</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>Night</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Positive</td>\n",
       "      <td>31.41998</td>\n",
       "      <td>98</td>\n",
       "      <td>46.042507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Joke Junction</td>\n",
       "      <td>Episode 26</td>\n",
       "      <td>119.80</td>\n",
       "      <td>66.95</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>75.95</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Negative</td>\n",
       "      <td>88.01241</td>\n",
       "      <td>26</td>\n",
       "      <td>44.426441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Study Sessions</td>\n",
       "      <td>Episode 16</td>\n",
       "      <td>73.90</td>\n",
       "      <td>69.97</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>Evening</td>\n",
       "      <td>8.97</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Negative</td>\n",
       "      <td>44.92531</td>\n",
       "      <td>16</td>\n",
       "      <td>45.736640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Digital Digest</td>\n",
       "      <td>Episode 45</td>\n",
       "      <td>67.17</td>\n",
       "      <td>57.22</td>\n",
       "      <td>Monday</td>\n",
       "      <td>Morning</td>\n",
       "      <td>78.70</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Positive</td>\n",
       "      <td>46.27824</td>\n",
       "      <td>45</td>\n",
       "      <td>45.634749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Mind &amp; Body</td>\n",
       "      <td>Episode 86</td>\n",
       "      <td>110.51</td>\n",
       "      <td>80.07</td>\n",
       "      <td>Monday</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>58.68</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>75.61031</td>\n",
       "      <td>86</td>\n",
       "      <td>45.741413</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id     Podcast_Name Episode_Title  Episode_Length_minutes  \\\n",
       "0   0  Mystery Matters    Episode 98                     NaN   \n",
       "1   1    Joke Junction    Episode 26                  119.80   \n",
       "2   2   Study Sessions    Episode 16                   73.90   \n",
       "3   3   Digital Digest    Episode 45                   67.17   \n",
       "4   4      Mind & Body    Episode 86                  110.51   \n",
       "\n",
       "   Host_Popularity_percentage Publication_Day Publication_Time  \\\n",
       "0                       74.81        Thursday            Night   \n",
       "1                       66.95        Saturday        Afternoon   \n",
       "2                       69.97         Tuesday          Evening   \n",
       "3                       57.22          Monday          Morning   \n",
       "4                       80.07          Monday        Afternoon   \n",
       "\n",
       "   Guest_Popularity_percentage  Number_of_Ads Episode_Sentiment  \\\n",
       "0                          NaN            0.0          Positive   \n",
       "1                        75.95            2.0          Negative   \n",
       "2                         8.97            0.0          Negative   \n",
       "3                        78.70            2.0          Positive   \n",
       "4                        58.68            3.0           Neutral   \n",
       "\n",
       "   Listening_Time_minutes  Episode_Number   Genre_TE  \n",
       "0                31.41998              98  46.042507  \n",
       "1                88.01241              26  44.426441  \n",
       "2                44.92531              16  45.736640  \n",
       "3                46.27824              45  45.634749  \n",
       "4                75.61031              86  45.741413  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from category_encoders import TargetEncoder\n",
    "\n",
    "# Initialize the encoder\n",
    "te_genre = TargetEncoder()\n",
    "\n",
    "# Fit on training data only (avoid data leakage)\n",
    "train['Genre_TE'] = te_genre.fit_transform(train['Genre'], train['Listening_Time_minutes'])\n",
    "\n",
    "# Transform test data using the same encoder\n",
    "test['Genre_TE'] = te_genre.transform(test['Genre'])\n",
    "\n",
    "# (Optional) Drop the original 'Genre' column if not needed\n",
    "train.drop('Genre', axis=1, inplace=True)\n",
    "test.drop('Genre', axis=1, inplace=True)\n",
    "\n",
    "train.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "777287fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:36.372377Z",
     "iopub.status.busy": "2025-09-22T14:58:36.371812Z",
     "iopub.status.idle": "2025-09-22T14:58:36.970946Z",
     "shell.execute_reply": "2025-09-22T14:58:36.969947Z"
    },
    "papermill": {
     "duration": 0.609649,
     "end_time": "2025-09-22T14:58:36.972243",
     "exception": false,
     "start_time": "2025-09-22T14:58:36.362594",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Podcast_Name</th>\n",
       "      <th>Episode_Title</th>\n",
       "      <th>Episode_Length_minutes</th>\n",
       "      <th>Host_Popularity_percentage</th>\n",
       "      <th>Publication_Day</th>\n",
       "      <th>Publication_Time</th>\n",
       "      <th>Guest_Popularity_percentage</th>\n",
       "      <th>Number_of_Ads</th>\n",
       "      <th>Episode_Sentiment</th>\n",
       "      <th>Listening_Time_minutes</th>\n",
       "      <th>Episode_Number</th>\n",
       "      <th>Genre_TE</th>\n",
       "      <th>Podcast_Name_TE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Mystery Matters</td>\n",
       "      <td>Episode 98</td>\n",
       "      <td>NaN</td>\n",
       "      <td>74.81</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>Night</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Positive</td>\n",
       "      <td>31.41998</td>\n",
       "      <td>98</td>\n",
       "      <td>46.042507</td>\n",
       "      <td>46.018361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Joke Junction</td>\n",
       "      <td>Episode 26</td>\n",
       "      <td>119.80</td>\n",
       "      <td>66.95</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>75.95</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Negative</td>\n",
       "      <td>88.01241</td>\n",
       "      <td>26</td>\n",
       "      <td>44.426441</td>\n",
       "      <td>42.640909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Study Sessions</td>\n",
       "      <td>Episode 16</td>\n",
       "      <td>73.90</td>\n",
       "      <td>69.97</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>Evening</td>\n",
       "      <td>8.97</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Negative</td>\n",
       "      <td>44.92531</td>\n",
       "      <td>16</td>\n",
       "      <td>45.736640</td>\n",
       "      <td>47.047780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Digital Digest</td>\n",
       "      <td>Episode 45</td>\n",
       "      <td>67.17</td>\n",
       "      <td>57.22</td>\n",
       "      <td>Monday</td>\n",
       "      <td>Morning</td>\n",
       "      <td>78.70</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Positive</td>\n",
       "      <td>46.27824</td>\n",
       "      <td>45</td>\n",
       "      <td>45.634749</td>\n",
       "      <td>44.769237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Mind &amp; Body</td>\n",
       "      <td>Episode 86</td>\n",
       "      <td>110.51</td>\n",
       "      <td>80.07</td>\n",
       "      <td>Monday</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>58.68</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>75.61031</td>\n",
       "      <td>86</td>\n",
       "      <td>45.741413</td>\n",
       "      <td>46.840078</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id     Podcast_Name Episode_Title  Episode_Length_minutes  \\\n",
       "0   0  Mystery Matters    Episode 98                     NaN   \n",
       "1   1    Joke Junction    Episode 26                  119.80   \n",
       "2   2   Study Sessions    Episode 16                   73.90   \n",
       "3   3   Digital Digest    Episode 45                   67.17   \n",
       "4   4      Mind & Body    Episode 86                  110.51   \n",
       "\n",
       "   Host_Popularity_percentage Publication_Day Publication_Time  \\\n",
       "0                       74.81        Thursday            Night   \n",
       "1                       66.95        Saturday        Afternoon   \n",
       "2                       69.97         Tuesday          Evening   \n",
       "3                       57.22          Monday          Morning   \n",
       "4                       80.07          Monday        Afternoon   \n",
       "\n",
       "   Guest_Popularity_percentage  Number_of_Ads Episode_Sentiment  \\\n",
       "0                          NaN            0.0          Positive   \n",
       "1                        75.95            2.0          Negative   \n",
       "2                         8.97            0.0          Negative   \n",
       "3                        78.70            2.0          Positive   \n",
       "4                        58.68            3.0           Neutral   \n",
       "\n",
       "   Listening_Time_minutes  Episode_Number   Genre_TE  Podcast_Name_TE  \n",
       "0                31.41998              98  46.042507        46.018361  \n",
       "1                88.01241              26  44.426441        42.640909  \n",
       "2                44.92531              16  45.736640        47.047780  \n",
       "3                46.27824              45  45.634749        44.769237  \n",
       "4                75.61031              86  45.741413        46.840078  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from category_encoders import TargetEncoder\n",
    "\n",
    "te = TargetEncoder()\n",
    "train['Podcast_Name_TE'] = te.fit_transform(train['Podcast_Name'],train['Listening_Time_minutes'])\n",
    "test['Podcast_Name_TE'] = te.transform(test['Podcast_Name'])\n",
    "\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8bc26554",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:36.991968Z",
     "iopub.status.busy": "2025-09-22T14:58:36.991751Z",
     "iopub.status.idle": "2025-09-22T14:58:38.063257Z",
     "shell.execute_reply": "2025-09-22T14:58:38.062685Z"
    },
    "papermill": {
     "duration": 1.08255,
     "end_time": "2025-09-22T14:58:38.064600",
     "exception": false,
     "start_time": "2025-09-22T14:58:36.982050",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Target encode Publication_Day and Publication_Time\n",
    "\n",
    "te_pub = TargetEncoder()\n",
    "train[['Publication_Day_TE', 'Publication_Time_TE']] = te_pub.fit_transform(\n",
    "    train[['Publication_Day', 'Publication_Time']], train['Listening_Time_minutes']\n",
    ")\n",
    "test[['Publication_Day_TE', 'Publication_Time_TE']] = te_pub.transform(\n",
    "    test[['Publication_Day', 'Publication_Time']]\n",
    ")\n",
    "\n",
    "# Drop original columns\n",
    "train.drop(['Publication_Day', 'Publication_Time'], axis=1, inplace=True)\n",
    "test.drop(['Publication_Day', 'Publication_Time'], axis=1, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2cfc79fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:38.084618Z",
     "iopub.status.busy": "2025-09-22T14:58:38.084395Z",
     "iopub.status.idle": "2025-09-22T14:58:38.278010Z",
     "shell.execute_reply": "2025-09-22T14:58:38.277365Z"
    },
    "papermill": {
     "duration": 0.204544,
     "end_time": "2025-09-22T14:58:38.279045",
     "exception": false,
     "start_time": "2025-09-22T14:58:38.074501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Podcast_Name</th>\n",
       "      <th>Episode_Title</th>\n",
       "      <th>Episode_Length_minutes</th>\n",
       "      <th>Host_Popularity_percentage</th>\n",
       "      <th>Guest_Popularity_percentage</th>\n",
       "      <th>Number_of_Ads</th>\n",
       "      <th>Episode_Sentiment</th>\n",
       "      <th>Listening_Time_minutes</th>\n",
       "      <th>Episode_Number</th>\n",
       "      <th>Genre_TE</th>\n",
       "      <th>Podcast_Name_TE</th>\n",
       "      <th>Publication_Day_TE</th>\n",
       "      <th>Publication_Time_TE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Mystery Matters</td>\n",
       "      <td>Episode 98</td>\n",
       "      <td>NaN</td>\n",
       "      <td>74.81</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>31.41998</td>\n",
       "      <td>98</td>\n",
       "      <td>46.042507</td>\n",
       "      <td>46.018361</td>\n",
       "      <td>44.869706</td>\n",
       "      <td>46.456655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Joke Junction</td>\n",
       "      <td>Episode 26</td>\n",
       "      <td>119.80</td>\n",
       "      <td>66.95</td>\n",
       "      <td>75.95</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>88.01241</td>\n",
       "      <td>26</td>\n",
       "      <td>44.426441</td>\n",
       "      <td>42.640909</td>\n",
       "      <td>45.326775</td>\n",
       "      <td>45.525603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Study Sessions</td>\n",
       "      <td>Episode 16</td>\n",
       "      <td>73.90</td>\n",
       "      <td>69.97</td>\n",
       "      <td>8.97</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>44.92531</td>\n",
       "      <td>16</td>\n",
       "      <td>45.736640</td>\n",
       "      <td>47.047780</td>\n",
       "      <td>46.131411</td>\n",
       "      <td>44.761567</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Digital Digest</td>\n",
       "      <td>Episode 45</td>\n",
       "      <td>67.17</td>\n",
       "      <td>57.22</td>\n",
       "      <td>78.70</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>46.27824</td>\n",
       "      <td>45</td>\n",
       "      <td>45.634749</td>\n",
       "      <td>44.769237</td>\n",
       "      <td>45.969630</td>\n",
       "      <td>44.964415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Mind &amp; Body</td>\n",
       "      <td>Episode 86</td>\n",
       "      <td>110.51</td>\n",
       "      <td>80.07</td>\n",
       "      <td>58.68</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>75.61031</td>\n",
       "      <td>86</td>\n",
       "      <td>45.741413</td>\n",
       "      <td>46.840078</td>\n",
       "      <td>45.969630</td>\n",
       "      <td>45.525603</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id     Podcast_Name Episode_Title  Episode_Length_minutes  \\\n",
       "0   0  Mystery Matters    Episode 98                     NaN   \n",
       "1   1    Joke Junction    Episode 26                  119.80   \n",
       "2   2   Study Sessions    Episode 16                   73.90   \n",
       "3   3   Digital Digest    Episode 45                   67.17   \n",
       "4   4      Mind & Body    Episode 86                  110.51   \n",
       "\n",
       "   Host_Popularity_percentage  Guest_Popularity_percentage  Number_of_Ads  \\\n",
       "0                       74.81                          NaN            0.0   \n",
       "1                       66.95                        75.95            2.0   \n",
       "2                       69.97                         8.97            0.0   \n",
       "3                       57.22                        78.70            2.0   \n",
       "4                       80.07                        58.68            3.0   \n",
       "\n",
       "   Episode_Sentiment  Listening_Time_minutes  Episode_Number   Genre_TE  \\\n",
       "0                2.0                31.41998              98  46.042507   \n",
       "1                0.0                88.01241              26  44.426441   \n",
       "2                0.0                44.92531              16  45.736640   \n",
       "3                2.0                46.27824              45  45.634749   \n",
       "4                1.0                75.61031              86  45.741413   \n",
       "\n",
       "   Podcast_Name_TE  Publication_Day_TE  Publication_Time_TE  \n",
       "0        46.018361           44.869706            46.456655  \n",
       "1        42.640909           45.326775            45.525603  \n",
       "2        47.047780           46.131411            44.761567  \n",
       "3        44.769237           45.969630            44.964415  \n",
       "4        46.840078           45.969630            45.525603  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "\n",
    "onc = OrdinalEncoder()\n",
    "\n",
    "data_to_transform = ['Episode_Sentiment']\n",
    "train[data_to_transform] = onc.fit_transform(train[data_to_transform])\n",
    "test[data_to_transform] = onc.transform(test[data_to_transform])\n",
    "train.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d307ee3c",
   "metadata": {
    "papermill": {
     "duration": 0.009365,
     "end_time": "2025-09-22T14:58:38.298125",
     "exception": false,
     "start_time": "2025-09-22T14:58:38.288760",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Now we can find the missing datas "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "62f170c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:38.317680Z",
     "iopub.status.busy": "2025-09-22T14:58:38.317451Z",
     "iopub.status.idle": "2025-09-22T14:58:38.400435Z",
     "shell.execute_reply": "2025-09-22T14:58:38.399691Z"
    },
    "papermill": {
     "duration": 0.094084,
     "end_time": "2025-09-22T14:58:38.401625",
     "exception": false,
     "start_time": "2025-09-22T14:58:38.307541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The columns with missing data are : ['Episode_Length_minutes', 'Guest_Popularity_percentage', 'Number_of_Ads']\n"
     ]
    }
   ],
   "source": [
    "missing_cols = [x for x in train.columns if train[x].isnull().any()]\n",
    "print(f\"The columns with missing data are : {missing_cols}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "063d97b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:38.421343Z",
     "iopub.status.busy": "2025-09-22T14:58:38.421112Z",
     "iopub.status.idle": "2025-09-22T14:58:38.425416Z",
     "shell.execute_reply": "2025-09-22T14:58:38.424728Z"
    },
    "papermill": {
     "duration": 0.015307,
     "end_time": "2025-09-22T14:58:38.426501",
     "exception": false,
     "start_time": "2025-09-22T14:58:38.411194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'Podcast_Name', 'Episode_Title', 'Episode_Length_minutes',\n",
       "       'Host_Popularity_percentage', 'Guest_Popularity_percentage',\n",
       "       'Number_of_Ads', 'Episode_Sentiment', 'Listening_Time_minutes',\n",
       "       'Episode_Number', 'Genre_TE', 'Podcast_Name_TE', 'Publication_Day_TE',\n",
       "       'Publication_Time_TE'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0761a4e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:38.446037Z",
     "iopub.status.busy": "2025-09-22T14:58:38.445511Z",
     "iopub.status.idle": "2025-09-22T14:58:38.477786Z",
     "shell.execute_reply": "2025-09-22T14:58:38.477183Z"
    },
    "papermill": {
     "duration": 0.043187,
     "end_time": "2025-09-22T14:58:38.479019",
     "exception": false,
     "start_time": "2025-09-22T14:58:38.435832",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_train = train[[ 'Podcast_Name_TE','Episode_Length_minutes',\n",
    "       'Genre_TE', 'Host_Popularity_percentage', 'Publication_Day_TE',\n",
    "       'Publication_Time_TE', 'Guest_Popularity_percentage', 'Number_of_Ads',\n",
    "       'Episode_Sentiment', 'Episode_Number']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7fdda17f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:38.499032Z",
     "iopub.status.busy": "2025-09-22T14:58:38.498818Z",
     "iopub.status.idle": "2025-09-22T14:58:38.513471Z",
     "shell.execute_reply": "2025-09-22T14:58:38.512791Z"
    },
    "papermill": {
     "duration": 0.025604,
     "end_time": "2025-09-22T14:58:38.514590",
     "exception": false,
     "start_time": "2025-09-22T14:58:38.488986",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_test = test[[ 'Podcast_Name_TE','Episode_Length_minutes',\n",
    "       'Genre_TE', 'Host_Popularity_percentage', 'Publication_Day_TE',\n",
    "       'Publication_Time_TE', 'Guest_Popularity_percentage', 'Number_of_Ads',\n",
    "       'Episode_Sentiment', 'Episode_Number']]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89bc5875",
   "metadata": {
    "papermill": {
     "duration": 0.009308,
     "end_time": "2025-09-22T14:58:38.533439",
     "exception": false,
     "start_time": "2025-09-22T14:58:38.524131",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We are finding missing data using SimpleImputer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "4b7e5fd5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:38.552855Z",
     "iopub.status.busy": "2025-09-22T14:58:38.552654Z",
     "iopub.status.idle": "2025-09-22T14:58:39.062246Z",
     "shell.execute_reply": "2025-09-22T14:58:39.061233Z"
    },
    "papermill": {
     "duration": 0.521764,
     "end_time": "2025-09-22T14:58:39.064515",
     "exception": false,
     "start_time": "2025-09-22T14:58:38.542751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.impute import SimpleImputer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e5726aac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:39.095813Z",
     "iopub.status.busy": "2025-09-22T14:58:39.095559Z",
     "iopub.status.idle": "2025-09-22T14:58:41.036178Z",
     "shell.execute_reply": "2025-09-22T14:58:41.035159Z"
    },
    "papermill": {
     "duration": 1.960998,
     "end_time": "2025-09-22T14:58:41.038101",
     "exception": false,
     "start_time": "2025-09-22T14:58:39.077103",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 750000 entries, 0 to 749999\n",
      "Data columns (total 10 columns):\n",
      " #   Column                       Non-Null Count   Dtype  \n",
      "---  ------                       --------------   -----  \n",
      " 0   Podcast_Name_TE              750000 non-null  float64\n",
      " 1   Episode_Length_minutes       750000 non-null  float64\n",
      " 2   Genre_TE                     750000 non-null  float64\n",
      " 3   Host_Popularity_percentage   750000 non-null  float64\n",
      " 4   Publication_Day_TE           750000 non-null  float64\n",
      " 5   Publication_Time_TE          750000 non-null  float64\n",
      " 6   Guest_Popularity_percentage  750000 non-null  float64\n",
      " 7   Number_of_Ads                750000 non-null  float64\n",
      " 8   Episode_Sentiment            750000 non-null  float64\n",
      " 9   Episode_Number               750000 non-null  float64\n",
      "dtypes: float64(10)\n",
      "memory usage: 57.2 MB\n"
     ]
    }
   ],
   "source": [
    "imputer = SimpleImputer(strategy = 'median')\n",
    "imputed_train_data = pd.DataFrame(imputer.fit_transform(x_train))\n",
    "imputed_test_data = pd.DataFrame(imputer.transform(x_test))\n",
    "\n",
    "imputed_train_data.columns = x_train.columns\n",
    "imputed_test_data.columns = x_test.columns\n",
    "\n",
    "imputed_train_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "534db797",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:41.062174Z",
     "iopub.status.busy": "2025-09-22T14:58:41.061968Z",
     "iopub.status.idle": "2025-09-22T14:58:41.066367Z",
     "shell.execute_reply": "2025-09-22T14:58:41.065693Z"
    },
    "papermill": {
     "duration": 0.01635,
     "end_time": "2025-09-22T14:58:41.067515",
     "exception": false,
     "start_time": "2025-09-22T14:58:41.051165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The columns with numerical data are : ['Podcast_Name_TE', 'Episode_Length_minutes', 'Genre_TE', 'Host_Popularity_percentage', 'Publication_Day_TE', 'Publication_Time_TE', 'Guest_Popularity_percentage', 'Number_of_Ads', 'Episode_Sentiment', 'Episode_Number']\n"
     ]
    }
   ],
   "source": [
    "col = (imputed_train_data.dtypes == 'float64')\n",
    "numerical_cols = list(col[col].index)\n",
    "\n",
    "print(f\"The columns with numerical data are : {numerical_cols}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ab41f07",
   "metadata": {
    "papermill": {
     "duration": 0.009929,
     "end_time": "2025-09-22T14:58:41.087833",
     "exception": false,
     "start_time": "2025-09-22T14:58:41.077904",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "96f64fb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:41.108519Z",
     "iopub.status.busy": "2025-09-22T14:58:41.108327Z",
     "iopub.status.idle": "2025-09-22T14:58:41.111436Z",
     "shell.execute_reply": "2025-09-22T14:58:41.110915Z"
    },
    "papermill": {
     "duration": 0.014111,
     "end_time": "2025-09-22T14:58:41.112406",
     "exception": false,
     "start_time": "2025-09-22T14:58:41.098295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Add statistical features\n",
    "# imputed_train_data['row_mean'] = imputed_train_data[numerical_cols].mean(axis=1)\n",
    "# imputed_train_data['row_std'] = imputed_train_data[numerical_cols].std(axis=1)\n",
    "# imputed_train_data['row_max'] = imputed_train_data[numerical_cols].max(axis=1)\n",
    "# imputed_train_data['row_min'] = imputed_train_data[numerical_cols].min(axis=1)\n",
    "\n",
    "# imputed_test_data['row_mean'] = imputed_test_data[numerical_cols].mean(axis=1)\n",
    "# imputed_test_data['row_std'] = imputed_test_data[numerical_cols].std(axis=1)\n",
    "# imputed_test_data['row_max'] = imputed_test_data[numerical_cols].max(axis=1)\n",
    "# imputed_test_data['row_min'] = imputed_test_data[numerical_cols].min(axis=1)\n",
    "\n",
    "\n",
    "# imputed_train_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f4170b2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:41.131707Z",
     "iopub.status.busy": "2025-09-22T14:58:41.131518Z",
     "iopub.status.idle": "2025-09-22T14:58:42.497628Z",
     "shell.execute_reply": "2025-09-22T14:58:42.496901Z"
    },
    "papermill": {
     "duration": 1.377086,
     "end_time": "2025-09-22T14:58:42.498888",
     "exception": false,
     "start_time": "2025-09-22T14:58:41.121802",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for col in imputed_train_data.columns:\n",
    "    plt.figure(figsize=(8,4))\n",
    "    sns.boxplot(data=imputed_train_data, x=col)\n",
    "    plt.title(f\"Boxplot for {col}\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4b9ed201",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:42.525904Z",
     "iopub.status.busy": "2025-09-22T14:58:42.525706Z",
     "iopub.status.idle": "2025-09-22T14:58:42.531272Z",
     "shell.execute_reply": "2025-09-22T14:58:42.530594Z"
    },
    "papermill": {
     "duration": 0.019582,
     "end_time": "2025-09-22T14:58:42.532391",
     "exception": false,
     "start_time": "2025-09-22T14:58:42.512809",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def remove_outliers_iqr(df, columns):\n",
    "    original_shape = df.shape\n",
    "    removed_info = {}\n",
    "\n",
    "    for col in columns:\n",
    "        Q1 = df[col].quantile(0.25)\n",
    "        Q3 = df[col].quantile(0.75)\n",
    "        IQR = Q3 - Q1\n",
    "        lower_bound = Q1 - 1.5 * IQR\n",
    "        upper_bound = Q3 + 1.5 * IQR\n",
    "        \n",
    "        before = df.shape[0]\n",
    "        df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]\n",
    "        after = df.shape[0]\n",
    "        removed = before - after\n",
    "\n",
    "        removed_info[col] = {\n",
    "            'Q1': Q1,\n",
    "            'Q3': Q3,\n",
    "            'IQR': IQR,\n",
    "            'lower_bound': lower_bound,\n",
    "            'upper_bound': upper_bound,\n",
    "            'removed_rows': removed\n",
    "        }\n",
    "\n",
    "    final_shape = df.shape\n",
    "\n",
    "    print(f\"Original shape: {original_shape}\")\n",
    "    print(f\"Final shape after outlier removal: {final_shape}\")\n",
    "    print(\"\\nOutlier removal details per column:\")\n",
    "    for col, info in removed_info.items():\n",
    "        print(f\"{col}: Removed {info['removed_rows']} rows\")\n",
    "    \n",
    "    return df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "cc0a9e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:42.557547Z",
     "iopub.status.busy": "2025-09-22T14:58:42.556964Z",
     "iopub.status.idle": "2025-09-22T14:58:43.200711Z",
     "shell.execute_reply": "2025-09-22T14:58:43.199758Z"
    },
    "papermill": {
     "duration": 0.657447,
     "end_time": "2025-09-22T14:58:43.201883",
     "exception": false,
     "start_time": "2025-09-22T14:58:42.544436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original shape: (750000, 11)\n",
      "Final shape after outlier removal: (749990, 11)\n",
      "\n",
      "Outlier removal details per column:\n",
      "Podcast_Name_TE: Removed 0 rows\n",
      "Episode_Length_minutes: Removed 1 rows\n",
      "Genre_TE: Removed 0 rows\n",
      "Host_Popularity_percentage: Removed 0 rows\n",
      "Publication_Day_TE: Removed 0 rows\n",
      "Publication_Time_TE: Removed 0 rows\n",
      "Guest_Popularity_percentage: Removed 0 rows\n",
      "Number_of_Ads: Removed 9 rows\n",
      "Episode_Sentiment: Removed 0 rows\n",
      "Episode_Number: Removed 0 rows\n",
      "Listening_Time_minutes: Removed 0 rows\n"
     ]
    }
   ],
   "source": [
    "# Combine X and y\n",
    "data = pd.concat([imputed_train_data, y], axis=1)\n",
    "\n",
    "columns_to_check = data.columns\n",
    "\n",
    "# Remove outliers on combined data\n",
    "data_cleaned = remove_outliers_iqr(data, columns_to_check)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "9c40ba47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:43.228063Z",
     "iopub.status.busy": "2025-09-22T14:58:43.227840Z",
     "iopub.status.idle": "2025-09-22T14:58:43.230835Z",
     "shell.execute_reply": "2025-09-22T14:58:43.230322Z"
    },
    "papermill": {
     "duration": 0.016613,
     "end_time": "2025-09-22T14:58:43.231841",
     "exception": false,
     "start_time": "2025-09-22T14:58:43.215228",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# numerical_cols = ['Podcast_Name_TE', 'Episode_Length_minutes', 'Genre_TE', 'Host_Popularity_percentage', 'Publication_Day_TE', 'Publication_Time_TE','Guest_Popularity_percentage', 'Number_of_Ads', 'Episode_Sentiment', 'Episode_Number','Listening_Time_minutes']\n",
    "\n",
    "# print(f\"The columns with numerical data are : {numerical_cols}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4e360fc1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:43.257007Z",
     "iopub.status.busy": "2025-09-22T14:58:43.256793Z",
     "iopub.status.idle": "2025-09-22T14:58:43.269234Z",
     "shell.execute_reply": "2025-09-22T14:58:43.268559Z"
    },
    "papermill": {
     "duration": 0.026309,
     "end_time": "2025-09-22T14:58:43.270394",
     "exception": false,
     "start_time": "2025-09-22T14:58:43.244085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Podcast_Name_TE</th>\n",
       "      <th>Episode_Length_minutes</th>\n",
       "      <th>Genre_TE</th>\n",
       "      <th>Host_Popularity_percentage</th>\n",
       "      <th>Publication_Day_TE</th>\n",
       "      <th>Publication_Time_TE</th>\n",
       "      <th>Guest_Popularity_percentage</th>\n",
       "      <th>Number_of_Ads</th>\n",
       "      <th>Episode_Sentiment</th>\n",
       "      <th>Episode_Number</th>\n",
       "      <th>Listening_Time_minutes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>46.018361</td>\n",
       "      <td>63.84</td>\n",
       "      <td>46.042507</td>\n",
       "      <td>74.81</td>\n",
       "      <td>44.869706</td>\n",
       "      <td>46.456655</td>\n",
       "      <td>53.58</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>31.41998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>42.640909</td>\n",
       "      <td>119.80</td>\n",
       "      <td>44.426441</td>\n",
       "      <td>66.95</td>\n",
       "      <td>45.326775</td>\n",
       "      <td>45.525603</td>\n",
       "      <td>75.95</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>88.01241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>47.047780</td>\n",
       "      <td>73.90</td>\n",
       "      <td>45.736640</td>\n",
       "      <td>69.97</td>\n",
       "      <td>46.131411</td>\n",
       "      <td>44.761567</td>\n",
       "      <td>8.97</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>44.92531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>44.769237</td>\n",
       "      <td>67.17</td>\n",
       "      <td>45.634749</td>\n",
       "      <td>57.22</td>\n",
       "      <td>45.969630</td>\n",
       "      <td>44.964415</td>\n",
       "      <td>78.70</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>46.27824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>46.840078</td>\n",
       "      <td>110.51</td>\n",
       "      <td>45.741413</td>\n",
       "      <td>80.07</td>\n",
       "      <td>45.969630</td>\n",
       "      <td>45.525603</td>\n",
       "      <td>58.68</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>75.61031</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Podcast_Name_TE  Episode_Length_minutes   Genre_TE  \\\n",
       "0        46.018361                   63.84  46.042507   \n",
       "1        42.640909                  119.80  44.426441   \n",
       "2        47.047780                   73.90  45.736640   \n",
       "3        44.769237                   67.17  45.634749   \n",
       "4        46.840078                  110.51  45.741413   \n",
       "\n",
       "   Host_Popularity_percentage  Publication_Day_TE  Publication_Time_TE  \\\n",
       "0                       74.81           44.869706            46.456655   \n",
       "1                       66.95           45.326775            45.525603   \n",
       "2                       69.97           46.131411            44.761567   \n",
       "3                       57.22           45.969630            44.964415   \n",
       "4                       80.07           45.969630            45.525603   \n",
       "\n",
       "   Guest_Popularity_percentage  Number_of_Ads  Episode_Sentiment  \\\n",
       "0                        53.58            0.0                2.0   \n",
       "1                        75.95            2.0                0.0   \n",
       "2                         8.97            0.0                0.0   \n",
       "3                        78.70            2.0                2.0   \n",
       "4                        58.68            3.0                1.0   \n",
       "\n",
       "   Episode_Number  Listening_Time_minutes  \n",
       "0            98.0                31.41998  \n",
       "1            26.0                88.01241  \n",
       "2            16.0                44.92531  \n",
       "3            45.0                46.27824  \n",
       "4            86.0                75.61031  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_cleaned.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "35bfc470",
   "metadata": {
    "papermill": {
     "duration": 0.012088,
     "end_time": "2025-09-22T14:58:43.294661",
     "exception": false,
     "start_time": "2025-09-22T14:58:43.282573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "5b12f06b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:43.320859Z",
     "iopub.status.busy": "2025-09-22T14:58:43.320653Z",
     "iopub.status.idle": "2025-09-22T14:58:43.575990Z",
     "shell.execute_reply": "2025-09-22T14:58:43.575159Z"
    },
    "papermill": {
     "duration": 0.270346,
     "end_time": "2025-09-22T14:58:43.577393",
     "exception": false,
     "start_time": "2025-09-22T14:58:43.307047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "corr_matrix = data_cleaned.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bba64723",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:43.604249Z",
     "iopub.status.busy": "2025-09-22T14:58:43.603780Z",
     "iopub.status.idle": "2025-09-22T14:58:44.063697Z",
     "shell.execute_reply": "2025-09-22T14:58:44.063048Z"
    },
    "papermill": {
     "duration": 0.475728,
     "end_time": "2025-09-22T14:58:44.066214",
     "exception": false,
     "start_time": "2025-09-22T14:58:43.590486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,10))\n",
    "sns.heatmap(corr_matrix, annot=True, fmt='.2f', cmap='coolwarm',square=True)\n",
    "plt.title(\"Correlation\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f0925325",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:44.098954Z",
     "iopub.status.busy": "2025-09-22T14:58:44.098756Z",
     "iopub.status.idle": "2025-09-22T14:58:44.102593Z",
     "shell.execute_reply": "2025-09-22T14:58:44.101949Z"
    },
    "papermill": {
     "duration": 0.021698,
     "end_time": "2025-09-22T14:58:44.103688",
     "exception": false,
     "start_time": "2025-09-22T14:58:44.081990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The columns with numerical data are : ['Podcast_Name_TE', 'Episode_Length_minutes', 'Genre_TE', 'Host_Popularity_percentage', 'Publication_Day_TE', 'Publication_Time_TE', 'Guest_Popularity_percentage', 'Number_of_Ads', 'Episode_Sentiment', 'Episode_Number']\n"
     ]
    }
   ],
   "source": [
    "\n",
    "numerical_cols = ['Podcast_Name_TE','Episode_Length_minutes',\n",
    "       'Genre_TE', 'Host_Popularity_percentage', 'Publication_Day_TE',\n",
    "       'Publication_Time_TE', 'Guest_Popularity_percentage', 'Number_of_Ads',\n",
    "       'Episode_Sentiment', 'Episode_Number']\n",
    "\n",
    "print(f\"The columns with numerical data are : {numerical_cols}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "c5da4b85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:44.132608Z",
     "iopub.status.busy": "2025-09-22T14:58:44.132417Z",
     "iopub.status.idle": "2025-09-22T14:58:44.909403Z",
     "shell.execute_reply": "2025-09-22T14:58:44.908369Z"
    },
    "papermill": {
     "duration": 0.792819,
     "end_time": "2025-09-22T14:58:44.910638",
     "exception": false,
     "start_time": "2025-09-22T14:58:44.117819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 749990 entries, 0 to 749999\n",
      "Data columns (total 18 columns):\n",
      " #   Column                       Non-Null Count   Dtype  \n",
      "---  ------                       --------------   -----  \n",
      " 0   Podcast_Name_TE              749990 non-null  float64\n",
      " 1   Episode_Length_minutes       749990 non-null  float64\n",
      " 2   Genre_TE                     749990 non-null  float64\n",
      " 3   Host_Popularity_percentage   749990 non-null  float64\n",
      " 4   Publication_Day_TE           749990 non-null  float64\n",
      " 5   Publication_Time_TE          749990 non-null  float64\n",
      " 6   Guest_Popularity_percentage  749990 non-null  float64\n",
      " 7   Number_of_Ads                749990 non-null  float64\n",
      " 8   Episode_Sentiment            749990 non-null  float64\n",
      " 9   Episode_Number               749990 non-null  float64\n",
      " 10  Listening_Time_minutes       749990 non-null  float64\n",
      " 11  row_mean                     749990 non-null  float64\n",
      " 12  row_std                      749990 non-null  float64\n",
      " 13  row_max                      749990 non-null  float64\n",
      " 14  row_min                      749990 non-null  float64\n",
      " 15  Episode_Length_per_Ad        749990 non-null  float64\n",
      " 16  HostGuest_Interaction        749990 non-null  float64\n",
      " 17  Row_Mean_to_Std              749990 non-null  float64\n",
      "dtypes: float64(18)\n",
      "memory usage: 108.7 MB\n"
     ]
    }
   ],
   "source": [
    "# Add statistical features\n",
    "data_cleaned['row_mean'] = data_cleaned[numerical_cols].mean(axis=1)\n",
    "data_cleaned['row_std'] = data_cleaned[numerical_cols].std(axis=1)\n",
    "data_cleaned['row_max'] = data_cleaned[numerical_cols].max(axis=1)\n",
    "data_cleaned['row_min'] = data_cleaned[numerical_cols].min(axis=1)\n",
    "\n",
    "\n",
    "imputed_test_data['row_mean'] = imputed_test_data[numerical_cols].mean(axis=1)\n",
    "imputed_test_data['row_std'] = imputed_test_data[numerical_cols].std(axis=1)\n",
    "imputed_test_data['row_max'] = imputed_test_data[numerical_cols].max(axis=1)\n",
    "imputed_test_data['row_min'] = imputed_test_data[numerical_cols].min(axis=1)\n",
    "\n",
    "\n",
    "\n",
    "data_cleaned['Episode_Length_per_Ad'] = data_cleaned['Episode_Length_minutes'] / (data_cleaned['Number_of_Ads'] + 1)\n",
    "imputed_test_data['Episode_Length_per_Ad'] = imputed_test_data['Episode_Length_minutes'] / (imputed_test_data['Number_of_Ads'] + 1)\n",
    "\n",
    "data_cleaned['HostGuest_Interaction'] = data_cleaned['Host_Popularity_percentage'] * data_cleaned['Guest_Popularity_percentage']\n",
    "imputed_test_data['HostGuest_Interaction'] = imputed_test_data['Host_Popularity_percentage'] * imputed_test_data['Guest_Popularity_percentage']\n",
    "\n",
    "data_cleaned['Row_Mean_to_Std'] = data_cleaned['row_mean'] / (data_cleaned['row_std'] + 1e-6)\n",
    "imputed_test_data['Row_Mean_to_Std'] = imputed_test_data['row_mean'] / (imputed_test_data['row_std'] + 1e-6)\n",
    "\n",
    "\n",
    "data_cleaned.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6aac945e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:44.941089Z",
     "iopub.status.busy": "2025-09-22T14:58:44.940888Z",
     "iopub.status.idle": "2025-09-22T14:58:46.196845Z",
     "shell.execute_reply": "2025-09-22T14:58:46.195992Z"
    },
    "papermill": {
     "duration": 1.272785,
     "end_time": "2025-09-22T14:58:46.198434",
     "exception": false,
     "start_time": "2025-09-22T14:58:44.925649",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original shape: (749990, 18)\n",
      "Final shape after outlier removal: (706199, 18)\n",
      "\n",
      "Outlier removal details per column:\n",
      "Podcast_Name_TE: Removed 0 rows\n",
      "Episode_Length_minutes: Removed 0 rows\n",
      "Genre_TE: Removed 0 rows\n",
      "Host_Popularity_percentage: Removed 0 rows\n",
      "Publication_Day_TE: Removed 0 rows\n",
      "Publication_Time_TE: Removed 0 rows\n",
      "Guest_Popularity_percentage: Removed 0 rows\n",
      "Number_of_Ads: Removed 0 rows\n",
      "Episode_Sentiment: Removed 0 rows\n",
      "Episode_Number: Removed 0 rows\n",
      "Listening_Time_minutes: Removed 0 rows\n",
      "row_mean: Removed 2099 rows\n",
      "row_std: Removed 107 rows\n",
      "row_max: Removed 0 rows\n",
      "row_min: Removed 0 rows\n",
      "Episode_Length_per_Ad: Removed 34608 rows\n",
      "HostGuest_Interaction: Removed 5506 rows\n",
      "Row_Mean_to_Std: Removed 1471 rows\n"
     ]
    }
   ],
   "source": [
    "# Combine X and y\n",
    "data = data_cleaned\n",
    "\n",
    "columns_to_check = data.columns\n",
    "\n",
    "# Remove outliers on combined data\n",
    "data_cleaned_1 = remove_outliers_iqr(data, columns_to_check)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "6f61cf17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:46.230653Z",
     "iopub.status.busy": "2025-09-22T14:58:46.229918Z",
     "iopub.status.idle": "2025-09-22T14:58:46.270940Z",
     "shell.execute_reply": "2025-09-22T14:58:46.270211Z"
    },
    "papermill": {
     "duration": 0.057663,
     "end_time": "2025-09-22T14:58:46.272098",
     "exception": false,
     "start_time": "2025-09-22T14:58:46.214435",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(706199, 13)\n",
      "(706199,)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Podcast_Name_TE</th>\n",
       "      <th>Episode_Length_minutes</th>\n",
       "      <th>Genre_TE</th>\n",
       "      <th>Host_Popularity_percentage</th>\n",
       "      <th>Publication_Time_TE</th>\n",
       "      <th>Number_of_Ads</th>\n",
       "      <th>Episode_Sentiment</th>\n",
       "      <th>row_max</th>\n",
       "      <th>row_mean</th>\n",
       "      <th>row_std</th>\n",
       "      <th>Episode_Length_per_Ad</th>\n",
       "      <th>HostGuest_Interaction</th>\n",
       "      <th>Row_Mean_to_Std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>46.018361</td>\n",
       "      <td>63.84</td>\n",
       "      <td>46.042507</td>\n",
       "      <td>74.81</td>\n",
       "      <td>46.456655</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>98.00</td>\n",
       "      <td>47.561723</td>\n",
       "      <td>29.700050</td>\n",
       "      <td>63.840000</td>\n",
       "      <td>4008.3198</td>\n",
       "      <td>1.601402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>42.640909</td>\n",
       "      <td>119.80</td>\n",
       "      <td>44.426441</td>\n",
       "      <td>66.95</td>\n",
       "      <td>45.525603</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>119.80</td>\n",
       "      <td>46.861973</td>\n",
       "      <td>35.341749</td>\n",
       "      <td>39.933333</td>\n",
       "      <td>5084.8525</td>\n",
       "      <td>1.325966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>47.047780</td>\n",
       "      <td>73.90</td>\n",
       "      <td>45.736640</td>\n",
       "      <td>69.97</td>\n",
       "      <td>44.761567</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>73.90</td>\n",
       "      <td>35.251740</td>\n",
       "      <td>27.291959</td>\n",
       "      <td>73.900000</td>\n",
       "      <td>627.6309</td>\n",
       "      <td>1.291653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>44.769237</td>\n",
       "      <td>67.17</td>\n",
       "      <td>45.634749</td>\n",
       "      <td>57.22</td>\n",
       "      <td>44.964415</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>78.70</td>\n",
       "      <td>43.342803</td>\n",
       "      <td>24.604566</td>\n",
       "      <td>22.390000</td>\n",
       "      <td>4503.2140</td>\n",
       "      <td>1.761576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>46.840078</td>\n",
       "      <td>110.51</td>\n",
       "      <td>45.741413</td>\n",
       "      <td>80.07</td>\n",
       "      <td>45.525603</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>110.51</td>\n",
       "      <td>52.333672</td>\n",
       "      <td>34.248977</td>\n",
       "      <td>27.627500</td>\n",
       "      <td>4698.5076</td>\n",
       "      <td>1.528036</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Podcast_Name_TE  Episode_Length_minutes   Genre_TE  \\\n",
       "0        46.018361                   63.84  46.042507   \n",
       "1        42.640909                  119.80  44.426441   \n",
       "2        47.047780                   73.90  45.736640   \n",
       "3        44.769237                   67.17  45.634749   \n",
       "4        46.840078                  110.51  45.741413   \n",
       "\n",
       "   Host_Popularity_percentage  Publication_Time_TE  Number_of_Ads  \\\n",
       "0                       74.81            46.456655            0.0   \n",
       "1                       66.95            45.525603            2.0   \n",
       "2                       69.97            44.761567            0.0   \n",
       "3                       57.22            44.964415            2.0   \n",
       "4                       80.07            45.525603            3.0   \n",
       "\n",
       "   Episode_Sentiment  row_max   row_mean    row_std  Episode_Length_per_Ad  \\\n",
       "0                2.0    98.00  47.561723  29.700050              63.840000   \n",
       "1                0.0   119.80  46.861973  35.341749              39.933333   \n",
       "2                0.0    73.90  35.251740  27.291959              73.900000   \n",
       "3                2.0    78.70  43.342803  24.604566              22.390000   \n",
       "4                1.0   110.51  52.333672  34.248977              27.627500   \n",
       "\n",
       "   HostGuest_Interaction  Row_Mean_to_Std  \n",
       "0              4008.3198         1.601402  \n",
       "1              5084.8525         1.325966  \n",
       "2               627.6309         1.291653  \n",
       "3              4503.2140         1.761576  \n",
       "4              4698.5076         1.528036  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = data_cleaned_1[['Podcast_Name_TE','Episode_Length_minutes',\n",
    "       'Genre_TE', 'Host_Popularity_percentage',\n",
    "       'Publication_Time_TE', 'Number_of_Ads',\n",
    "       'Episode_Sentiment','row_max','row_mean','row_std','Listening_Time_minutes',\n",
    "        'Episode_Length_per_Ad', 'HostGuest_Interaction', 'Row_Mean_to_Std']]\n",
    "\n",
    "y = X.pop('Listening_Time_minutes')\n",
    "\n",
    "\n",
    "print(X.shape)\n",
    "print(y.shape)\n",
    "\n",
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "71bd276b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:46.303835Z",
     "iopub.status.busy": "2025-09-22T14:58:46.303575Z",
     "iopub.status.idle": "2025-09-22T14:58:46.454459Z",
     "shell.execute_reply": "2025-09-22T14:58:46.453382Z"
    },
    "papermill": {
     "duration": 0.167513,
     "end_time": "2025-09-22T14:58:46.455694",
     "exception": false,
     "start_time": "2025-09-22T14:58:46.288181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(564959, 13)\n",
      "(141240, 13)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "trainX,valX,trainY,valY = train_test_split(X,y,train_size=0.8,random_state=2)\n",
    "\n",
    "print(trainX.shape)\n",
    "print(valX.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "bb292290",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:46.487257Z",
     "iopub.status.busy": "2025-09-22T14:58:46.487021Z",
     "iopub.status.idle": "2025-09-22T14:58:46.510335Z",
     "shell.execute_reply": "2025-09-22T14:58:46.509382Z"
    },
    "papermill": {
     "duration": 0.040049,
     "end_time": "2025-09-22T14:58:46.511614",
     "exception": false,
     "start_time": "2025-09-22T14:58:46.471565",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The columns with missing data are : []\n"
     ]
    }
   ],
   "source": [
    "missing_cols = [x for x in trainX.columns if trainX[x].isnull().any()]\n",
    "print(f\"The columns with missing data are : {missing_cols}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "02101e37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:46.543583Z",
     "iopub.status.busy": "2025-09-22T14:58:46.543378Z",
     "iopub.status.idle": "2025-09-22T14:58:46.564951Z",
     "shell.execute_reply": "2025-09-22T14:58:46.564427Z"
    },
    "papermill": {
     "duration": 0.039075,
     "end_time": "2025-09-22T14:58:46.566211",
     "exception": false,
     "start_time": "2025-09-22T14:58:46.527136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_testing = imputed_test_data[['Podcast_Name_TE','Episode_Length_minutes',\n",
    "       'Genre_TE', 'Host_Popularity_percentage',\n",
    "       'Publication_Time_TE', 'Number_of_Ads',\n",
    "       'Episode_Sentiment','row_max','row_mean','row_std',\"Episode_Length_per_Ad\",\"HostGuest_Interaction\",\"Row_Mean_to_Std\" ]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "cc997327",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:46.598082Z",
     "iopub.status.busy": "2025-09-22T14:58:46.597694Z",
     "iopub.status.idle": "2025-09-22T14:58:46.602061Z",
     "shell.execute_reply": "2025-09-22T14:58:46.601536Z"
    },
    "papermill": {
     "duration": 0.020569,
     "end_time": "2025-09-22T14:58:46.603082",
     "exception": false,
     "start_time": "2025-09-22T14:58:46.582513",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# from sklearn.linear_model import LinearRegression, Ridge, Lasso\n",
    "# from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, StackingRegressor\n",
    "# from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "# from xgboost import XGBRegressor\n",
    "# from lightgbm import LGBMRegressor\n",
    "# from catboost import CatBoostRegressor\n",
    "\n",
    "\n",
    "\n",
    "# # All models including stacking\n",
    "# models = {\n",
    "#     # 'LinearRegression': LinearRegression(),\n",
    "#     # 'Ridge': Ridge(alpha=1.0, random_state=2),\n",
    "#     # 'Lasso': Lasso(alpha=0.001, random_state=2),\n",
    "#     # 'GradientBoosting': GradientBoostingRegressor(\n",
    "#     #     n_estimators=500, learning_rate=0.05, max_depth=5, subsample=0.8, random_state=2\n",
    "#     # ),\n",
    "#     # 'XGBoost': XGBRegressor(\n",
    "#     #     n_estimators=500, learning_rate=0.05, max_depth=6, subsample=0.8,\n",
    "#     #     colsample_bytree=0.8, random_state=2, n_jobs=-1\n",
    "#     # ),\n",
    "#     # 'LightGBM': LGBMRegressor(\n",
    "#     #     n_estimators=500, learning_rate=0.05, max_depth=-1, subsample=0.8,\n",
    "#     #     colsample_bytree=0.8, random_state=2, n_jobs=-1\n",
    "#     # ),\n",
    "#     # 'CatBoost': CatBoostRegressor(\n",
    "#     #     iterations=500, learning_rate=0.05, depth=6, random_state=2, verbose=0\n",
    "#     # ),\n",
    "    \n",
    "#     'RandomForest': RandomForestRegressor(\n",
    "#         n_estimators=800, max_depth=30, min_samples_split=5, min_samples_leaf=2,\n",
    "#         max_features='sqrt', bootstrap=True, random_state=2, n_jobs=-1\n",
    "#     )\n",
    "    \n",
    "# }\n",
    "\n",
    "# # --- Evaluation Loop ---\n",
    "# results = {}\n",
    "# for name, model in models.items():\n",
    "#     model.fit(trainX, trainY)\n",
    "#     pred = model.predict(valX)\n",
    "\n",
    "#     rmse = mean_squared_error(valY, pred, squared=False)\n",
    "#     mae = mean_absolute_error(valY, pred)\n",
    "#     r2 = r2_score(valY, pred)\n",
    "\n",
    "#     results[name] = {'RMSE': rmse, 'MAE': mae, 'R2': r2}\n",
    "#     print(f\"\\n{name} - RMSE: {rmse:.4f}, MAE: {mae:.4f}, R2: {r2:.4f}\")\n",
    "    \n",
    "\n",
    "\n",
    "# # class BlendedModel:\n",
    "# #     def __init__(self, models, weights):\n",
    "# #         self.models = models\n",
    "# #         self.weights = np.array(weights) / np.sum(weights)  # normalize to sum=1\n",
    "\n",
    "# #     def fit(self, X, y):\n",
    "# #         # models are already trained, so no need to refit\n",
    "# #         pass\n",
    "\n",
    "# #     def predict(self, X):\n",
    "# #         preds = [w * model.predict(X) for model, w in zip(self.models, self.weights)]\n",
    "# #         return np.sum(preds, axis=0)\n",
    "\n",
    "\n",
    "# # # --- Build blended model using best 4 models ---\n",
    "# # blend = BlendedModel(\n",
    "# #     models=[\n",
    "# #         models['RandomForest'],\n",
    "# #         models['XGBoost'],\n",
    "# #         models['LightGBM'],\n",
    "# #         models['CatBoost']\n",
    "# #     ],\n",
    "# #     weights=[0.45, 0.25, 0.20, 0.10]  # you can tune these\n",
    "# # )\n",
    "\n",
    "# # # --- Evaluate blended model ---\n",
    "# # pred_blend = blend.predict(valX)\n",
    "# # rmse = mean_squared_error(valY, pred_blend, squared=False)\n",
    "# # mae = mean_absolute_error(valY, pred_blend)\n",
    "# # r2 = r2_score(valY, pred_blend)\n",
    "\n",
    "# # results['Blended'] = {'RMSE': rmse, 'MAE': mae, 'R2': r2}\n",
    "# # print(f\"\\nBlended - RMSE: {rmse:.4f}, MAE: {mae:.4f}, R2: {r2:.4f}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c37bb0d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:46.633368Z",
     "iopub.status.busy": "2025-09-22T14:58:46.633144Z",
     "iopub.status.idle": "2025-09-22T14:58:46.636012Z",
     "shell.execute_reply": "2025-09-22T14:58:46.635493Z"
    },
    "papermill": {
     "duration": 0.019168,
     "end_time": "2025-09-22T14:58:46.637134",
     "exception": false,
     "start_time": "2025-09-22T14:58:46.617966",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# best_model_name = min(results, key=lambda k: results[k]['RMSE'])\n",
    "# print(f\"\\nBest model: {best_model_name}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "0d6bbb98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:46.667620Z",
     "iopub.status.busy": "2025-09-22T14:58:46.667046Z",
     "iopub.status.idle": "2025-09-22T14:58:46.670016Z",
     "shell.execute_reply": "2025-09-22T14:58:46.669488Z"
    },
    "papermill": {
     "duration": 0.019109,
     "end_time": "2025-09-22T14:58:46.670997",
     "exception": false,
     "start_time": "2025-09-22T14:58:46.651888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# import joblib\n",
    "\n",
    "# # Save models\n",
    "# for name, model in models.items():\n",
    "#     filename = f\"/kaggle/working/{name}_model.pkl\"\n",
    "#     joblib.dump(model, filename)\n",
    "#     print(f\"✅ Saved {name} to {filename}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "ae72c8e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:46.701112Z",
     "iopub.status.busy": "2025-09-22T14:58:46.700920Z",
     "iopub.status.idle": "2025-09-22T14:58:46.703747Z",
     "shell.execute_reply": "2025-09-22T14:58:46.703219Z"
    },
    "papermill": {
     "duration": 0.019092,
     "end_time": "2025-09-22T14:58:46.704765",
     "exception": false,
     "start_time": "2025-09-22T14:58:46.685673",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import joblib\n",
    "\n",
    "# # List of models to reload\n",
    "# model_names = [\"RandomForest\"]\n",
    "\n",
    "# loaded_models = {}\n",
    "# for name in model_names:\n",
    "#     filename = f\"/kaggle/working/{name}_model.pkl\"\n",
    "#     loaded_models[name] = joblib.load(filename)\n",
    "#     print(f\"✅ Loaded {name} from {filename}\")\n",
    "\n",
    "# # Example usage\n",
    "# model = loaded_models[\"RandomForest\"]\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f073c7f2",
   "metadata": {
    "papermill": {
     "duration": 0.014203,
     "end_time": "2025-09-22T14:58:46.733491",
     "exception": false,
     "start_time": "2025-09-22T14:58:46.719288",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We Found that Random forest is the best model for this particular task\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "e9bd17fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:46.762789Z",
     "iopub.status.busy": "2025-09-22T14:58:46.762607Z",
     "iopub.status.idle": "2025-09-22T14:58:54.925742Z",
     "shell.execute_reply": "2025-09-22T14:58:54.925102Z"
    },
    "papermill": {
     "duration": 8.179291,
     "end_time": "2025-09-22T14:58:54.927050",
     "exception": false,
     "start_time": "2025-09-22T14:58:46.747759",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
    "from xgboost import XGBRegressor\n",
    "from lightgbm import LGBMRegressor\n",
    "from catboost import CatBoostRegressor\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "\n",
    "# Define models\n",
    "models = {\n",
    "    \"RandomForest\": RandomForestRegressor(\n",
    "        n_estimators=400, max_depth=30, random_state=2, n_jobs=-1\n",
    "    ),\n",
    "    \"XGBoost\": XGBRegressor(\n",
    "        n_estimators=400, learning_rate=0.05, max_depth=6,\n",
    "        subsample=0.8, colsample_bytree=0.8, random_state=2, n_jobs=-1\n",
    "    ),\n",
    "    \"LightGBM\": LGBMRegressor(\n",
    "        n_estimators=400, learning_rate=0.05, max_depth=-1,\n",
    "        subsample=0.8, colsample_bytree=0.8, random_state=2, n_jobs=-1\n",
    "    ),\n",
    "    \"GradientBoosting\": GradientBoostingRegressor(\n",
    "        n_estimators=400, learning_rate=0.05, max_depth=5,\n",
    "        subsample=0.8, random_state=2\n",
    "    ),\n",
    "    \"CatBoost\": CatBoostRegressor(\n",
    "        iterations=400, learning_rate=0.05, depth=6,\n",
    "        random_state=2, verbose=0\n",
    "    )\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "d3d6818d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T14:58:54.957955Z",
     "iopub.status.busy": "2025-09-22T14:58:54.957499Z",
     "iopub.status.idle": "2025-09-22T15:33:14.025922Z",
     "shell.execute_reply": "2025-09-22T15:33:14.025128Z"
    },
    "papermill": {
     "duration": 2059.084756,
     "end_time": "2025-09-22T15:33:14.027126",
     "exception": false,
     "start_time": "2025-09-22T14:58:54.942370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RandomForest - RMSE: 12.7055, MAE: 8.9995, R2: 0.7608\n",
      "XGBoost - RMSE: 12.9458, MAE: 9.3287, R2: 0.7516\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.035059 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 2112\n",
      "[LightGBM] [Info] Number of data points in the train set: 564959, number of used features: 13\n",
      "[LightGBM] [Info] Start training from score 43.492708\n",
      "LightGBM - RMSE: 12.9558, MAE: 9.3464, R2: 0.7513\n",
      "GradientBoosting - RMSE: 12.9554, MAE: 9.3414, R2: 0.7513\n",
      "CatBoost - RMSE: 12.9981, MAE: 9.3818, R2: 0.7496\n"
     ]
    }
   ],
   "source": [
    "results = {}\n",
    "val_preds = {}\n",
    "\n",
    "for name, model in models.items():\n",
    "    model.fit(trainX, trainY)\n",
    "    preds = model.predict(valX)\n",
    "\n",
    "    rmse = mean_squared_error(valY, preds, squared=False)\n",
    "    mae = mean_absolute_error(valY, preds)\n",
    "    r2 = r2_score(valY, preds)\n",
    "\n",
    "    results[name] = {\"RMSE\": rmse, \"MAE\": mae, \"R2\": r2}\n",
    "    val_preds[name] = preds\n",
    "\n",
    "    print(f\"{name} - RMSE: {rmse:.4f}, MAE: {mae:.4f}, R2: {r2:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "bd13d5c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T15:33:14.061821Z",
     "iopub.status.busy": "2025-09-22T15:33:14.061227Z",
     "iopub.status.idle": "2025-09-22T15:33:14.072481Z",
     "shell.execute_reply": "2025-09-22T15:33:14.071725Z"
    },
    "papermill": {
     "duration": 0.02785,
     "end_time": "2025-09-22T15:33:14.073663",
     "exception": false,
     "start_time": "2025-09-22T15:33:14.045813",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Weighted Ensemble - RMSE: 12.8457, MAE: 9.2482, R2: 0.7555\n"
     ]
    }
   ],
   "source": [
    "# Get weights proportional to R² scores\n",
    "r2_scores = np.array([results[m][\"R2\"] for m in models.keys()])\n",
    "weights = r2_scores / r2_scores.sum()\n",
    "\n",
    "# Weighted average prediction\n",
    "weighted_pred = np.zeros_like(valY, dtype=float)\n",
    "for w, (name, pred) in zip(weights, val_preds.items()):\n",
    "    weighted_pred += w * pred\n",
    "\n",
    "rmse = mean_squared_error(valY, weighted_pred, squared=False)\n",
    "mae = mean_absolute_error(valY, weighted_pred)\n",
    "r2 = r2_score(valY, weighted_pred)\n",
    "\n",
    "print(f\"\\nWeighted Ensemble - RMSE: {rmse:.4f}, MAE: {mae:.4f}, R2: {r2:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "9a9a5f96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T15:33:14.106972Z",
     "iopub.status.busy": "2025-09-22T15:33:14.106538Z",
     "iopub.status.idle": "2025-09-22T15:33:14.116250Z",
     "shell.execute_reply": "2025-09-22T15:33:14.115711Z"
    },
    "papermill": {
     "duration": 0.026002,
     "end_time": "2025-09-22T15:33:14.117263",
     "exception": false,
     "start_time": "2025-09-22T15:33:14.091261",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simple Average Ensemble - RMSE: 12.8467, MAE: 9.2491, R2: 0.7554\n"
     ]
    }
   ],
   "source": [
    "avg_pred = np.mean(list(val_preds.values()), axis=0)\n",
    "\n",
    "rmse = mean_squared_error(valY, avg_pred, squared=False)\n",
    "mae = mean_absolute_error(valY, avg_pred)\n",
    "r2 = r2_score(valY, avg_pred)\n",
    "\n",
    "print(f\"Simple Average Ensemble - RMSE: {rmse:.4f}, MAE: {mae:.4f}, R2: {r2:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "7bdf82cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T15:33:14.150218Z",
     "iopub.status.busy": "2025-09-22T15:33:14.149829Z",
     "iopub.status.idle": "2025-09-22T15:33:14.153020Z",
     "shell.execute_reply": "2025-09-22T15:33:14.152344Z"
    },
    "papermill": {
     "duration": 0.019545,
     "end_time": "2025-09-22T15:33:14.154039",
     "exception": false,
     "start_time": "2025-09-22T15:33:14.134494",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# from sklearn.ensemble import RandomForestRegressor\n",
    "# from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "\n",
    "# model = RandomForestRegressor(\n",
    "#         n_estimators=300,random_state=2, n_jobs=-1\n",
    "#     )\n",
    "\n",
    "# results = {}\n",
    "\n",
    "# model.fit(trainX, trainY)\n",
    "# pred = model.predict(valX)\n",
    "\n",
    "# rmse = mean_squared_error(valY, pred, squared=False)\n",
    "# mae = mean_absolute_error(valY, pred)\n",
    "# r2 = r2_score(valY, pred)\n",
    "\n",
    "# results[\"RandomForest\"] = {'RMSE': rmse, 'MAE': mae, 'R2': r2}\n",
    "# print(f\"\\nRandomForest - RMSE: {rmse:.4f}, MAE: {mae:.4f}, R2: {r2:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "6f7e867f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T15:33:14.184603Z",
     "iopub.status.busy": "2025-09-22T15:33:14.184389Z",
     "iopub.status.idle": "2025-09-22T15:33:14.187431Z",
     "shell.execute_reply": "2025-09-22T15:33:14.186752Z"
    },
    "papermill": {
     "duration": 0.019511,
     "end_time": "2025-09-22T15:33:14.188452",
     "exception": false,
     "start_time": "2025-09-22T15:33:14.168941",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# model.fit(trainX, trainY)\n",
    "# pred = model.predict(valX)\n",
    "\n",
    "# rmse = mean_squared_error(valY, pred, squared=False)\n",
    "# mae = mean_absolute_error(valY, pred)\n",
    "# r2 = r2_score(valY, pred)\n",
    "\n",
    "# # results[name] = {'RMSE': rmse, 'MAE': mae, 'R2': r2}\n",
    "# print(f\"\\n{name} - RMSE: {rmse:.4f}, MAE: {mae:.4f}, R2: {r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "c9972846",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T15:33:14.219123Z",
     "iopub.status.busy": "2025-09-22T15:33:14.218647Z",
     "iopub.status.idle": "2025-09-22T15:33:14.221736Z",
     "shell.execute_reply": "2025-09-22T15:33:14.221162Z"
    },
    "papermill": {
     "duration": 0.019481,
     "end_time": "2025-09-22T15:33:14.222777",
     "exception": false,
     "start_time": "2025-09-22T15:33:14.203296",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# filename = f\"/kaggle/working/RandomForest_model.pkl\"\n",
    "# joblib.dump(model, filename)\n",
    "# print(f\"✅ Saved {name} to {filename}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "4eaa3c4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T15:33:14.253660Z",
     "iopub.status.busy": "2025-09-22T15:33:14.253457Z",
     "iopub.status.idle": "2025-09-22T15:33:14.256240Z",
     "shell.execute_reply": "2025-09-22T15:33:14.255732Z"
    },
    "papermill": {
     "duration": 0.019114,
     "end_time": "2025-09-22T15:33:14.257195",
     "exception": false,
     "start_time": "2025-09-22T15:33:14.238081",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# # model = models[best_model_name]\n",
    "\n",
    "# print(model)\n",
    "\n",
    "# model.fit(X, y)\n",
    "\n",
    "# prediction = model.predict(X_testing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "37f9ef60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T15:33:14.287631Z",
     "iopub.status.busy": "2025-09-22T15:33:14.287430Z",
     "iopub.status.idle": "2025-09-22T16:17:15.877447Z",
     "shell.execute_reply": "2025-09-22T16:17:15.876696Z"
    },
    "papermill": {
     "duration": 2641.622838,
     "end_time": "2025-09-22T16:17:15.894822",
     "exception": false,
     "start_time": "2025-09-22T15:33:14.271984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.040315 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 2112\n",
      "[LightGBM] [Info] Number of data points in the train set: 706199, number of used features: 13\n",
      "[LightGBM] [Info] Start training from score 43.476621\n",
      "✅ Submission saved!\n"
     ]
    }
   ],
   "source": [
    "# Retrain all models on full data\n",
    "for model in models.values():\n",
    "    model.fit(X, y)\n",
    "\n",
    "# Collect test predictions\n",
    "test_preds = [model.predict(X_testing) for model in models.values()]\n",
    "\n",
    "# Weighted ensemble on test\n",
    "final_test_pred = np.average(test_preds, axis=0, weights=weights)\n",
    "\n",
    "# Save submission\n",
    "output = pd.DataFrame({\n",
    "    \"id\": test[\"id\"],\n",
    "    \"Listening_Time_minutes\": final_test_pred\n",
    "})\n",
    "output.to_csv(\"submission.csv\", index=False)\n",
    "print(\"✅ Submission saved!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "2233123b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T16:17:15.925927Z",
     "iopub.status.busy": "2025-09-22T16:17:15.925686Z",
     "iopub.status.idle": "2025-09-22T16:17:15.929000Z",
     "shell.execute_reply": "2025-09-22T16:17:15.928268Z"
    },
    "papermill": {
     "duration": 0.020053,
     "end_time": "2025-09-22T16:17:15.930140",
     "exception": false,
     "start_time": "2025-09-22T16:17:15.910087",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# output = pd.DataFrame({'id': test['id'],\n",
    "#                        'Listening_Time_minutes': (prediction)})\n",
    "# output.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "3e3c3c13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-22T16:17:15.961414Z",
     "iopub.status.busy": "2025-09-22T16:17:15.960982Z",
     "iopub.status.idle": "2025-09-22T16:17:16.026290Z",
     "shell.execute_reply": "2025-09-22T16:17:16.025518Z"
    },
    "papermill": {
     "duration": 0.082158,
     "end_time": "2025-09-22T16:17:16.027480",
     "exception": false,
     "start_time": "2025-09-22T16:17:15.945322",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Listening_Time_minutes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>750000</td>\n",
       "      <td>56.123204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>750001</td>\n",
       "      <td>18.865036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>750002</td>\n",
       "      <td>48.748999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>750003</td>\n",
       "      <td>78.194106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>750004</td>\n",
       "      <td>48.432136</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  Listening_Time_minutes\n",
       "0  750000               56.123204\n",
       "1  750001               18.865036\n",
       "2  750002               48.748999\n",
       "3  750003               78.194106\n",
       "4  750004               48.432136"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"submission.csv\")\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04bccd08",
   "metadata": {
    "papermill": {
     "duration": 0.015126,
     "end_time": "2025-09-22T16:17:16.058478",
     "exception": false,
     "start_time": "2025-09-22T16:17:16.043352",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 13224658,
     "sourceId": 110049,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4739.390408,
   "end_time": "2025-09-22T16:17:19.629544",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-22T14:58:20.239136",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
