{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/hadikp/introvert-extrovert-prediction?scriptVersionId=252970425\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"26a3f421","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2025-07-28T15:56:21.736932Z","iopub.status.busy":"2025-07-28T15:56:21.736379Z","iopub.status.idle":"2025-07-28T15:56:23.704843Z","shell.execute_reply":"2025-07-28T15:56:23.704053Z"},"papermill":{"duration":1.976119,"end_time":"2025-07-28T15:56:23.706174","exception":false,"start_time":"2025-07-28T15:56:21.730055","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["/kaggle/input/playground-series-s5e7/sample_submission.csv\n","/kaggle/input/playground-series-s5e7/train.csv\n","/kaggle/input/playground-series-s5e7/test.csv\n"]}],"source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","\n","# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n","# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"]},{"cell_type":"code","execution_count":2,"id":"0c77088e","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:23.716685Z","iopub.status.busy":"2025-07-28T15:56:23.716359Z","iopub.status.idle":"2025-07-28T15:56:23.794188Z","shell.execute_reply":"2025-07-28T15:56:23.793645Z"},"papermill":{"duration":0.08413,"end_time":"2025-07-28T15:56:23.795368","exception":false,"start_time":"2025-07-28T15:56:23.711238","status":"completed"},"tags":[]},"outputs":[],"source":["train_data = pd.read_csv('/kaggle/input/playground-series-s5e7/train.csv')\n","test_data = pd.read_csv('/kaggle/input/playground-series-s5e7/test.csv')\n"]},{"cell_type":"code","execution_count":3,"id":"1c30e9fe","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:23.806076Z","iopub.status.busy":"2025-07-28T15:56:23.805868Z","iopub.status.idle":"2025-07-28T15:56:23.870741Z","shell.execute_reply":"2025-07-28T15:56:23.869823Z"},"papermill":{"duration":0.071306,"end_time":"2025-07-28T15:56:23.871917","exception":false,"start_time":"2025-07-28T15:56:23.800611","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.series.Series'>\n","RangeIndex: 18524 entries, 0 to 18523\n","Series name: Personality\n","Non-Null Count  Dtype\n","--------------  -----\n","18524 non-null  int64\n","dtypes: int64(1)\n","memory usage: 144.8 KB\n"]},{"name":"stderr","output_type":"stream","text":["/tmp/ipykernel_19/3786157471.py:1: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  train_data['Personality'] = train_data['Personality'].replace({'Extrovert': 1, 'Introvert': 0})\n"]}],"source":["train_data['Personality'] = train_data['Personality'].replace({'Extrovert': 1, 'Introvert': 0})\n","y = train_data.pop('Personality')\n","y.info()\n"]},{"cell_type":"code","execution_count":4,"id":"93cfcdb0","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:23.882171Z","iopub.status.busy":"2025-07-28T15:56:23.881728Z","iopub.status.idle":"2025-07-28T15:56:23.891794Z","shell.execute_reply":"2025-07-28T15:56:23.891104Z"},"papermill":{"duration":0.016522,"end_time":"2025-07-28T15:56:23.893005","exception":false,"start_time":"2025-07-28T15:56:23.876483","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 18524 entries, 0 to 18523\n","Data columns (total 8 columns):\n"," #   Column                     Non-Null Count  Dtype  \n","---  ------                     --------------  -----  \n"," 0   id                         18524 non-null  int64  \n"," 1   Time_spent_Alone           17334 non-null  float64\n"," 2   Stage_fear                 16631 non-null  object \n"," 3   Social_event_attendance    17344 non-null  float64\n"," 4   Going_outside              17058 non-null  float64\n"," 5   Drained_after_socializing  17375 non-null  object \n"," 6   Friends_circle_size        17470 non-null  float64\n"," 7   Post_frequency             17260 non-null  float64\n","dtypes: float64(5), int64(1), object(2)\n","memory usage: 1.1+ MB\n"]}],"source":["# train_data = train_data.dropna()\n","train_data.info()"]},{"cell_type":"code","execution_count":5,"id":"d0d080eb","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:23.902995Z","iopub.status.busy":"2025-07-28T15:56:23.902797Z","iopub.status.idle":"2025-07-28T15:56:23.912961Z","shell.execute_reply":"2025-07-28T15:56:23.912208Z"},"papermill":{"duration":0.016366,"end_time":"2025-07-28T15:56:23.91415","exception":false,"start_time":"2025-07-28T15:56:23.897784","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["id Contains the values : [    0     1     2 ... 18521 18522 18523]\n","Time_spent_Alone Contains the values : [ 0.  1.  6.  3.  2.  4. nan  5.  9. 10.  7.  8. 11.]\n","Stage_fear Contains the values : ['No' 'Yes' nan]\n","Social_event_attendance Contains the values : [ 6.  7.  1.  4.  8.  2.  5. nan  0.  9.  3. 10.]\n","Going_outside Contains the values : [ 4.  3.  0.  5. nan  1.  6.  2.  7.]\n","Drained_after_socializing Contains the values : ['No' nan 'Yes']\n","Friends_circle_size Contains the values : [15. 10.  3. 11. 13. nan  4.  0. 14.  5.  9. 12.  8.  2.  1.  6.  7.]\n","Post_frequency Contains the values : [ 5.  8.  0. nan  3.  4.  2.  9. 10.  6.  7.  1.]\n"]}],"source":["for cols in train_data.columns:\n","    print(f\"{cols} Contains the values : {train_data[cols].unique()}\")"]},{"cell_type":"code","execution_count":6,"id":"ab45fd40","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:23.925464Z","iopub.status.busy":"2025-07-28T15:56:23.925238Z","iopub.status.idle":"2025-07-28T15:56:23.93106Z","shell.execute_reply":"2025-07-28T15:56:23.93033Z"},"papermill":{"duration":0.01218,"end_time":"2025-07-28T15:56:23.932127","exception":false,"start_time":"2025-07-28T15:56:23.919947","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["['Stage_fear', 'Drained_after_socializing']"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["s = (train_data.dtypes=='object')\n","obj_cols = list(s[s].index)\n","\n","obj_cols"]},{"cell_type":"code","execution_count":7,"id":"e1a57acc","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:23.943074Z","iopub.status.busy":"2025-07-28T15:56:23.942875Z","iopub.status.idle":"2025-07-28T15:56:26.329489Z","shell.execute_reply":"2025-07-28T15:56:26.328919Z"},"papermill":{"duration":2.393236,"end_time":"2025-07-28T15:56:26.330774","exception":false,"start_time":"2025-07-28T15:56:23.937538","status":"completed"},"tags":[]},"outputs":[],"source":["from sklearn.preprocessing import OrdinalEncoder\n","\n","encoder = OrdinalEncoder()\n","\n","encoded_train_data = train_data.copy()\n","encoded_test_data = test_data.copy()\n","\n","encoded_train_data[obj_cols] = encoder.fit_transform(train_data[obj_cols])\n","\n","encoded_test_data[obj_cols] = encoder.transform(test_data[obj_cols])"]},{"cell_type":"code","execution_count":8,"id":"d4b99e86","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:26.341533Z","iopub.status.busy":"2025-07-28T15:56:26.341253Z","iopub.status.idle":"2025-07-28T15:56:26.349074Z","shell.execute_reply":"2025-07-28T15:56:26.348302Z"},"papermill":{"duration":0.014307,"end_time":"2025-07-28T15:56:26.350159","exception":false,"start_time":"2025-07-28T15:56:26.335852","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["The missing columns are ['Time_spent_Alone', 'Stage_fear', 'Social_event_attendance', 'Going_outside', 'Drained_after_socializing', 'Friends_circle_size', 'Post_frequency']\n"]}],"source":["col_missing= [col for col in train_data.columns if train_data[col].isnull().any()]\n","print(f\"The missing columns are {col_missing}\")\n","    "]},{"cell_type":"markdown","id":"4ae4dd74","metadata":{"papermill":{"duration":0.00476,"end_time":"2025-07-28T15:56:26.359634","exception":false,"start_time":"2025-07-28T15:56:26.354874","status":"completed"},"tags":[]},"source":["Drained_after_socializing and Stage_fear columns contains \"yes\" or \"no\". so after imputation its value shouldbe 0 or 1."]},{"cell_type":"code","execution_count":9,"id":"9c32f683","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:26.369792Z","iopub.status.busy":"2025-07-28T15:56:26.369392Z","iopub.status.idle":"2025-07-28T15:56:38.415414Z","shell.execute_reply":"2025-07-28T15:56:38.414718Z"},"papermill":{"duration":12.052672,"end_time":"2025-07-28T15:56:38.416797","exception":false,"start_time":"2025-07-28T15:56:26.364125","status":"completed"},"tags":[]},"outputs":[],"source":["from sklearn.impute import KNNImputer\n","\n","\n","impute = KNNImputer(n_neighbors=10)\n","imputed_train_data = pd.DataFrame(impute.fit_transform(encoded_train_data))\n","imputed_test_data = pd.DataFrame(impute.transform(encoded_test_data))\n","\n","\n","imputed_train_data.columns = encoded_train_data.columns\n","imputed_test_data.columns = encoded_test_data.columns\n","\n","# Columns to apply threshold logic\n","binary_cols = ['Stage_fear', 'Drained_after_socializing']\n","\n","# Apply binary thresholding to selected columns\n","for col in binary_cols:\n","    imputed_train_data[col] = imputed_train_data[col].apply(lambda x: 1.0 if x > 0.5 else 0.0)\n","    imputed_test_data[col] = imputed_test_data[col].apply(lambda x: 1.0 if x > 0.5 else 0.0)\n"]},{"cell_type":"code","execution_count":10,"id":"18f3e3d3","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:38.427565Z","iopub.status.busy":"2025-07-28T15:56:38.427342Z","iopub.status.idle":"2025-07-28T15:56:38.430855Z","shell.execute_reply":"2025-07-28T15:56:38.430149Z"},"papermill":{"duration":0.009956,"end_time":"2025-07-28T15:56:38.431997","exception":false,"start_time":"2025-07-28T15:56:38.422041","status":"completed"},"tags":[]},"outputs":[],"source":["# # Time spent alone vs. friends\n","# imputed_train_data['Alone_vs_Friends'] = imputed_train_data['Time_spent_Alone'] / (imputed_train_data['Friends_circle_size'] + 1e-5)\n","\n","# # Social activity level\n","# imputed_train_data['Social_score'] = (imputed_train_data['Social_event_attendance'] + imputed_train_data['Post_frequency'] + imputed_train_data['Going_outside']) / 3\n","\n","# # Time spent alone vs. friends (avoid division by zero)\n","# imputed_test_data['Alone_vs_Friends'] = imputed_test_data['Time_spent_Alone'] / (imputed_test_data['Friends_circle_size'] + 1e-5)\n","\n","# # Social activity score\n","# imputed_test_data['Social_score'] = (\n","#     imputed_test_data['Social_event_attendance'] + \n","#     imputed_test_data['Post_frequency'] + \n","#     imputed_test_data['Going_outside']\n","# ) / 3\n"]},{"cell_type":"code","execution_count":11,"id":"4aafd6d2","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:38.442163Z","iopub.status.busy":"2025-07-28T15:56:38.441961Z","iopub.status.idle":"2025-07-28T15:56:38.450682Z","shell.execute_reply":"2025-07-28T15:56:38.449843Z"},"papermill":{"duration":0.015136,"end_time":"2025-07-28T15:56:38.451839","exception":false,"start_time":"2025-07-28T15:56:38.436703","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 18524 entries, 0 to 18523\n","Data columns (total 8 columns):\n"," #   Column                     Non-Null Count  Dtype  \n","---  ------                     --------------  -----  \n"," 0   id                         18524 non-null  float64\n"," 1   Time_spent_Alone           18524 non-null  float64\n"," 2   Stage_fear                 18524 non-null  float64\n"," 3   Social_event_attendance    18524 non-null  float64\n"," 4   Going_outside              18524 non-null  float64\n"," 5   Drained_after_socializing  18524 non-null  float64\n"," 6   Friends_circle_size        18524 non-null  float64\n"," 7   Post_frequency             18524 non-null  float64\n","dtypes: float64(8)\n","memory usage: 1.1 MB\n"]}],"source":["imputed_train_data.info()"]},{"cell_type":"code","execution_count":12,"id":"9fdbc162","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:38.462261Z","iopub.status.busy":"2025-07-28T15:56:38.462068Z","iopub.status.idle":"2025-07-28T15:56:38.466698Z","shell.execute_reply":"2025-07-28T15:56:38.466012Z"},"papermill":{"duration":0.011194,"end_time":"2025-07-28T15:56:38.467801","exception":false,"start_time":"2025-07-28T15:56:38.456607","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["2"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["y.nunique()\n"]},{"cell_type":"code","execution_count":13,"id":"41b74efc","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:38.478034Z","iopub.status.busy":"2025-07-28T15:56:38.477838Z","iopub.status.idle":"2025-07-28T15:56:38.482317Z","shell.execute_reply":"2025-07-28T15:56:38.481832Z"},"papermill":{"duration":0.010588,"end_time":"2025-07-28T15:56:38.483278","exception":false,"start_time":"2025-07-28T15:56:38.47269","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["0    1\n","1    1\n","2    0\n","3    1\n","4    1\n","Name: Personality, dtype: int64"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["y.head()"]},{"cell_type":"code","execution_count":14,"id":"ccec4f25","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:38.494163Z","iopub.status.busy":"2025-07-28T15:56:38.493581Z","iopub.status.idle":"2025-07-28T15:56:38.524921Z","shell.execute_reply":"2025-07-28T15:56:38.523945Z"},"papermill":{"duration":0.03799,"end_time":"2025-07-28T15:56:38.525997","exception":false,"start_time":"2025-07-28T15:56:38.488007","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","Before Conversion:\n","id Contains the values : [0.0000e+00 1.0000e+00 2.0000e+00 ... 1.8521e+04 1.8522e+04 1.8523e+04]\n","\n","After conversion:\n","id Contains the values : [0.0000e+00 1.0000e+00 2.0000e+00 ... 1.8521e+04 1.8522e+04 1.8523e+04]\n","\n","Before Conversion:\n","Time_spent_Alone Contains the values : [ 0.   1.   6.   3.   2.   4.   1.9  5.   9.   4.9  2.6  1.3 10.   7.\n","  8.   3.2 11.   2.1  2.2  6.6  2.7  2.8  1.6  3.3  2.3  2.4  3.9  6.3\n","  6.1  2.5  4.3  1.2  1.1  4.2  4.4  5.7  4.6  1.7  3.7  2.9  4.1  4.8\n","  3.5  1.5  3.6  3.1  5.1  5.5  1.8  4.7  0.9  3.8  4.5  1.4  3.4  6.8\n","  6.9  5.8  6.5  5.6  5.3  5.2  0.8  0.5  6.2  5.9  6.7  0.6  5.4  7.9\n","  6.4  0.4  0.7  7.2  7.7]\n","\n","After conversion:\n","Time_spent_Alone Contains the values : [ 0.  1.  6.  3.  2.  4.  5.  9. 10.  7.  8. 11.]\n","\n","Before Conversion:\n","Stage_fear Contains the values : [0. 1.]\n","\n","After conversion:\n","Stage_fear Contains the values : [0. 1.]\n","\n","Before Conversion:\n","Social_event_attendance Contains the values : [ 6.   7.   1.   4.   8.   2.   5.   6.7  0.   5.7  9.   3.   6.5  3.3\n","  6.2  4.4 10.   3.5  2.5  7.7  5.8  3.9  2.3  3.7  2.8  7.2  4.6  6.3\n","  3.1  3.4  5.5  4.8  6.6  4.2  4.9  6.8  6.4  5.9  3.8  4.3  4.5  5.4\n","  5.2  5.1  7.5  5.6  2.4  4.7  3.6  6.1  4.1  7.4  7.1  2.6  6.9  5.3\n","  3.2  7.9  7.6  7.8  2.9  2.7  1.9  7.3  2.2  1.8  2.1  1.6  8.4]\n","\n","After conversion:\n","Social_event_attendance Contains the values : [ 6.  7.  1.  4.  8.  2.  5.  0.  9.  3. 10.]\n","\n","Before Conversion:\n","Going_outside Contains the values : [4.  3.  0.  5.  3.9 1.  6.  2.  7.  3.5 4.8 3.3 1.7 2.9 3.7 3.8 2.6 4.4\n"," 3.6 4.6 4.9 4.1 4.5 4.3 2.1 2.4 1.9 4.2 4.7 3.4 5.1 2.7 2.3 5.3 5.2 3.2\n"," 5.5 5.8 2.8 1.8 5.6 5.7 2.5 1.6 5.4 5.9 1.4 3.1 2.2 6.3 6.1 1.3 6.2 1.5\n"," 1.2]\n","\n","After conversion:\n","Going_outside Contains the values : [4. 3. 0. 5. 1. 6. 2. 7.]\n","\n","Before Conversion:\n","Drained_after_socializing Contains the values : [0. 1.]\n","\n","After conversion:\n","Drained_after_socializing Contains the values : [0. 1.]\n","\n","Before Conversion:\n","Friends_circle_size Contains the values : [15.  10.   3.  11.  13.   8.5  4.   0.  14.   5.   9.  12.   8.   2.\n","  1.   6.   7.   5.6  3.9  7.5 11.2  8.7  3.6 10.2  9.9  7.2 10.3  9.2\n","  8.3  4.6  5.1  5.5  6.5  9.7  6.1  6.3  8.4  6.4  8.9  7.7 11.4  4.3\n","  9.3  9.5  5.8  5.4  6.7  9.1  7.9 10.1 10.9  7.4  8.8  9.8  7.6  5.3\n","  7.8  5.7 10.8  8.1  7.3  8.2  9.6  8.6  7.1 12.1  6.9 11.5  9.4  4.9\n"," 10.6  4.4  3.8  4.7  4.8  6.6 11.3  5.2 10.4  6.8 10.5  6.2  3.4 11.6\n"," 11.1 10.7  4.5  5.9 12.5 11.7  3.5 12.4  4.2  2.9  3.7  4.1 11.9  3.1]\n","\n","After conversion:\n","Friends_circle_size Contains the values : [15. 10.  3. 11. 13.  8.  4.  0. 14.  5.  9. 12.  2.  1.  6.  7.]\n","\n","Before Conversion:\n","Post_frequency Contains the values : [ 5.   8.   0.   6.   3.   4.   2.   9.  10.   7.5  7.   1.   5.3  1.4\n","  5.8  6.2  6.4  3.4  5.9  3.8  4.6  6.7  6.8  4.8  4.2  2.7  1.3  6.9\n","  4.3  5.5  4.9  6.1  4.4  5.6  7.2  7.3  4.5  5.4  2.9  2.6  6.6  3.1\n","  3.5  3.6  3.2  5.1  6.3  1.7  4.1  5.2  3.9  3.7  4.7  6.5  2.8  3.3\n","  7.1  5.7  7.4  1.6  1.9  2.5  7.9  2.2  2.1  2.3  2.4  7.6  7.7  7.8\n","  1.8  1.5]\n","\n","After conversion:\n","Post_frequency Contains the values : [ 5.  8.  0.  6.  3.  4.  2.  9. 10.  7.  1.]\n"]}],"source":["for cols in imputed_train_data.columns:\n","    print(f\"\\nBefore Conversion:\")\n","    print(f\"{cols} Contains the values : {imputed_train_data[cols].unique()}\")\n","    print(f\"\\nAfter conversion:\")\n","    imputed_train_data[cols] = np.floor(imputed_train_data[cols]).astype(float)\n","    imputed_test_data[cols] = np.floor(imputed_test_data[cols]).astype(float)\n","    print(f\"{cols} Contains the values : {imputed_train_data[cols].unique()}\")"]},{"cell_type":"code","execution_count":15,"id":"146b4222","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:38.536734Z","iopub.status.busy":"2025-07-28T15:56:38.536516Z","iopub.status.idle":"2025-07-28T15:56:38.544446Z","shell.execute_reply":"2025-07-28T15:56:38.543613Z"},"papermill":{"duration":0.014731,"end_time":"2025-07-28T15:56:38.545794","exception":false,"start_time":"2025-07-28T15:56:38.531063","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 18524 entries, 0 to 18523\n","Data columns (total 8 columns):\n"," #   Column                     Non-Null Count  Dtype  \n","---  ------                     --------------  -----  \n"," 0   id                         18524 non-null  float64\n"," 1   Time_spent_Alone           18524 non-null  float64\n"," 2   Stage_fear                 18524 non-null  float64\n"," 3   Social_event_attendance    18524 non-null  float64\n"," 4   Going_outside              18524 non-null  float64\n"," 5   Drained_after_socializing  18524 non-null  float64\n"," 6   Friends_circle_size        18524 non-null  float64\n"," 7   Post_frequency             18524 non-null  float64\n","dtypes: float64(8)\n","memory usage: 1.1 MB\n"]}],"source":["imputed_train_data.info()"]},{"cell_type":"code","execution_count":16,"id":"e0ce19a8","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:38.556788Z","iopub.status.busy":"2025-07-28T15:56:38.556578Z","iopub.status.idle":"2025-07-28T15:56:38.559685Z","shell.execute_reply":"2025-07-28T15:56:38.559073Z"},"papermill":{"duration":0.009749,"end_time":"2025-07-28T15:56:38.560831","exception":false,"start_time":"2025-07-28T15:56:38.551082","status":"completed"},"tags":[]},"outputs":[],"source":["# from sklearn.preprocessing import MinMaxScaler\n","\n","# num_cols = [\n","#     'Time_spent_Alone',\n","#     'Social_event_attendance',\n","#     'Going_outside',\n","#     'Friends_circle_size',\n","#     'Post_frequency',\n","#     # 'Alone_vs_Friends',\n","#     # 'Social_score'\n","# ]\n","\n","# scaler = MinMaxScaler()\n","# imputed_train_data[num_cols] = scaler.fit_transform(imputed_train_data[num_cols])\n","# imputed_test_data[num_cols] = scaler.transform(imputed_test_data[num_cols])\n","\n"]},{"cell_type":"code","execution_count":17,"id":"d9489be0","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:38.571461Z","iopub.status.busy":"2025-07-28T15:56:38.571259Z","iopub.status.idle":"2025-07-28T15:56:38.580342Z","shell.execute_reply":"2025-07-28T15:56:38.579702Z"},"papermill":{"duration":0.015722,"end_time":"2025-07-28T15:56:38.581374","exception":false,"start_time":"2025-07-28T15:56:38.565652","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["(16671, 8)\n","(1853, 8)\n"]}],"source":["from sklearn.model_selection import train_test_split\n","trainX,valX,trainY,valY = train_test_split(imputed_train_data,y,train_size=0.9,random_state=2)\n","\n","print(trainX.shape)\n","print(valX.shape)\n","\n"]},{"cell_type":"code","execution_count":18,"id":"67369498","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:38.592148Z","iopub.status.busy":"2025-07-28T15:56:38.591952Z","iopub.status.idle":"2025-07-28T15:56:38.612079Z","shell.execute_reply":"2025-07-28T15:56:38.611284Z"},"papermill":{"duration":0.026796,"end_time":"2025-07-28T15:56:38.613158","exception":false,"start_time":"2025-07-28T15:56:38.586362","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Time_spent_Alone</th>\n","      <th>Stage_fear</th>\n","      <th>Social_event_attendance</th>\n","      <th>Going_outside</th>\n","      <th>Drained_after_socializing</th>\n","      <th>Friends_circle_size</th>\n","      <th>Post_frequency</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>6.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>15.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>7.0</td>\n","      <td>3.0</td>\n","      <td>0.0</td>\n","      <td>10.0</td>\n","      <td>8.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2.0</td>\n","      <td>6.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>0.0</td>\n","      <td>7.0</td>\n","      <td>3.0</td>\n","      <td>0.0</td>\n","      <td>11.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>13.0</td>\n","      <td>6.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    id  Time_spent_Alone  Stage_fear  Social_event_attendance  Going_outside  \\\n","0  0.0               0.0         0.0                      6.0            4.0   \n","1  1.0               1.0         0.0                      7.0            3.0   \n","2  2.0               6.0         1.0                      1.0            0.0   \n","3  3.0               3.0         0.0                      7.0            3.0   \n","4  4.0               1.0         0.0                      4.0            4.0   \n","\n","   Drained_after_socializing  Friends_circle_size  Post_frequency  \n","0                        0.0                 15.0             5.0  \n","1                        0.0                 10.0             8.0  \n","2                        0.0                  3.0             0.0  \n","3                        0.0                 11.0             5.0  \n","4                        0.0                 13.0             6.0  "]},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":["imputed_train_data.head()"]},{"cell_type":"code","execution_count":19,"id":"14eadd72","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:38.624358Z","iopub.status.busy":"2025-07-28T15:56:38.624165Z","iopub.status.idle":"2025-07-28T15:56:39.143082Z","shell.execute_reply":"2025-07-28T15:56:39.142503Z"},"papermill":{"duration":0.52593,"end_time":"2025-07-28T15:56:39.144357","exception":false,"start_time":"2025-07-28T15:56:38.618427","status":"completed"},"tags":[]},"outputs":[],"source":["from xgboost import XGBClassifier\n","\n","# model = XGBClassifier()\n","\n","# n_estimators=1000,max_depth=5,learning_rate=0.04,random_state=1"]},{"cell_type":"code","execution_count":20,"id":"e211c85a","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:39.15738Z","iopub.status.busy":"2025-07-28T15:56:39.157165Z","iopub.status.idle":"2025-07-28T15:56:39.160425Z","shell.execute_reply":"2025-07-28T15:56:39.159868Z"},"papermill":{"duration":0.011229,"end_time":"2025-07-28T15:56:39.161377","exception":false,"start_time":"2025-07-28T15:56:39.150148","status":"completed"},"tags":[]},"outputs":[],"source":["# from sklearn.metrics import accuracy_score\n","# from xgboost import XGBClassifier\n","# import matplotlib.pyplot as plt\n","# import numpy as np  \n","\n","# scores = []\n","# depth_values = list(range(1, 25))  \n","\n","# for k in depth_values:\n","#     rfc = XGBClassifier(n_estimators=200, max_depth=k, learning_rate=0.01, use_label_encoder=False, eval_metric='logloss',random_state=1)\n","#     rfc.fit(trainX, trainY)\n","#     y_pred = rfc.predict(valX)\n","#     scores.append(accuracy_score(valY, y_pred))\n","\n","# x_ticks = np.arange(1, 25, 1)  \n","\n","# plt.figure(figsize=(10, 6))\n","# plt.plot(depth_values, scores, marker='o', linestyle='--', color='b')\n","# plt.xlabel('max_depth for XGBoost Classifier')\n","# plt.ylabel('Validation Accuracy')\n","# plt.title('Effect of max_depth on Accuracy')\n","# plt.grid(True)\n","# plt.xticks(x_ticks)  \n","# plt.tight_layout()\n","# plt.show()\n"]},{"cell_type":"code","execution_count":21,"id":"055cb83c","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:39.172541Z","iopub.status.busy":"2025-07-28T15:56:39.172343Z","iopub.status.idle":"2025-07-28T15:56:39.17539Z","shell.execute_reply":"2025-07-28T15:56:39.174924Z"},"papermill":{"duration":0.009791,"end_time":"2025-07-28T15:56:39.176311","exception":false,"start_time":"2025-07-28T15:56:39.16652","status":"completed"},"tags":[]},"outputs":[],"source":["# from sklearn.metrics import accuracy_score\n","\n","# scores =[]\n","# for k in range(100, 2000,100):\n","#     rfc = XGBClassifier(n_estimators=k,max_depth=9,learning_rate=0.01,use_label_encoder=False, eval_metric='logloss',random_state=1)\n","#     rfc.fit(trainX, trainY)\n","#     y_pred = rfc.predict(valX)\n","#     scores.append(accuracy_score(valY, y_pred))\n","\n","# import matplotlib.pyplot as plt\n","# %matplotlib inline\n","\n","# # plot the relationship between K and testing accuracy\n","# # plt.plot(x_axis, y_axis)\n","# plt.plot(range(100, 2000, 100), scores)\n","# plt.xlabel('Value of n_estimators for Random Forest Classifier')\n","# plt.ylabel('Testing Accuracy')\n","# x_ticks = np.arange(100, 2000, 100)\n","# plt.grid(True)\n","# plt.xticks(x_ticks)  \n","# plt.tight_layout()\n","# plt.show()\n"]},{"cell_type":"code","execution_count":22,"id":"0574e5bf","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:39.187484Z","iopub.status.busy":"2025-07-28T15:56:39.187278Z","iopub.status.idle":"2025-07-28T15:56:39.190677Z","shell.execute_reply":"2025-07-28T15:56:39.189966Z"},"papermill":{"duration":0.010127,"end_time":"2025-07-28T15:56:39.191821","exception":false,"start_time":"2025-07-28T15:56:39.181694","status":"completed"},"tags":[]},"outputs":[],"source":["# from sklearn.metrics import accuracy_score\n","# from xgboost import XGBClassifier\n","# import numpy as np\n","# import matplotlib.pyplot as plt\n","\n","# scores = []\n","# learning_rates = np.arange(0.01, 1.01, 0.01)  \n","\n","# for lr in learning_rates:\n","#     model = XGBClassifier(n_estimators=200, max_depth=9, learning_rate=lr, use_label_encoder=False, eval_metric='logloss',random_state=1)\n","#     model.fit(trainX, trainY)\n","#     y_pred = model.predict(valX)\n","#     acc = accuracy_score(valY, y_pred)\n","#     scores.append(acc)\n","\n","# # Plotting\n","# plt.figure(figsize=(8, 5))\n","# plt.plot(learning_rates, scores, color='b')\n","# plt.xlabel('Learning Rate')\n","# plt.ylabel('Validation Accuracy')\n","# plt.title('Effect of Learning Rate on Accuracy')\n","# plt.grid(True)\n","\n","# tick_positions = np.arange(0, len(learning_rates), 2)  # every 2th index\n","# tick_labels = [f\"{learning_rates[i]:.2f}\" for i in tick_positions]  # format to 2 decimal places\n","\n","# plt.xticks(ticks=learning_rates[tick_positions], labels=tick_labels, rotation=45)\n","\n","# plt.tight_layout()\n","\n","# plt.show()\n","\n"]},{"cell_type":"code","execution_count":23,"id":"a83c0ae8","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:39.20288Z","iopub.status.busy":"2025-07-28T15:56:39.202644Z","iopub.status.idle":"2025-07-28T15:56:39.205595Z","shell.execute_reply":"2025-07-28T15:56:39.205099Z"},"papermill":{"duration":0.009656,"end_time":"2025-07-28T15:56:39.206559","exception":false,"start_time":"2025-07-28T15:56:39.196903","status":"completed"},"tags":[]},"outputs":[],"source":["# from sklearn.model_selection import GridSearchCV, StratifiedKFold\n","# from xgboost import XGBClassifier\n","\n","# # Define hyperparameter grid (based on your manual ranges)\n","# param_grid = {\n","#     'max_depth': list(range(3, 11, 1)),          # same as your depth_values\n","#     'n_estimators': list(range(100, 1000, 100)), # sampled from your estimator range\n","#     'learning_rate': np.arange(0.01, 0.2, 0.02) # narrower LR range for efficiency\n","# }\n","\n","# # Initialize model\n","# xgb = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=1)\n","\n","# # Cross-validation strategy\n","# cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n","\n","# # Grid search with accuracy scoring\n","# grid_search = GridSearchCV(\n","#     estimator=xgb,\n","#     param_grid=param_grid,\n","#     scoring='accuracy',\n","#     cv=cv,\n","#     verbose=2,\n","#     n_jobs=-1\n","# )\n","\n","# # Fit the grid search\n","# grid_search.fit(trainX, trainY)\n","\n","\n"]},{"cell_type":"markdown","id":"cb9d993f","metadata":{"papermill":{"duration":0.004765,"end_time":"2025-07-28T15:56:39.216594","exception":false,"start_time":"2025-07-28T15:56:39.211829","status":"completed"},"tags":[]},"source":["we got :\n","\n","1) Case-1\n","Best Parameters: {'learning_rate': 0.01, 'max_depth': 2, 'n_estimators': 300}\n","\n","Best Cross-Validated Accuracy: 0.96880780365666\n","\n","2) Case-2\n","Best Parameters: {'learning_rate': 0.08999999999999998, 'max_depth': 3, 'n_estimators': 100}\n","\n","Best Cross-Validated Accuracy: 0.9686878276518609"]},{"cell_type":"code","execution_count":24,"id":"8c761fbc","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:39.227346Z","iopub.status.busy":"2025-07-28T15:56:39.227155Z","iopub.status.idle":"2025-07-28T15:56:39.230288Z","shell.execute_reply":"2025-07-28T15:56:39.229704Z"},"papermill":{"duration":0.009481,"end_time":"2025-07-28T15:56:39.231221","exception":false,"start_time":"2025-07-28T15:56:39.22174","status":"completed"},"tags":[]},"outputs":[],"source":["# from sklearn.metrics import accuracy_score\n","\n","# # Best parameters and score\n","# print(\"Best Parameters:\", grid_search.best_params_)\n","# print(\"Best Cross-Validated Accuracy:\", grid_search.best_score_)\n","\n","# best_model = grid_search.best_estimator_\n","\n","# # Evaluate on validation set\n","# val_pred = best_model.predict(valX)\n","# val_acc = accuracy_score(valY, val_pred)\n","# print(\"Validation Accuracy with Best Model:\", val_acc)\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"code","execution_count":25,"id":"22547a41","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:39.242209Z","iopub.status.busy":"2025-07-28T15:56:39.242003Z","iopub.status.idle":"2025-07-28T15:56:39.456985Z","shell.execute_reply":"2025-07-28T15:56:39.455494Z"},"papermill":{"duration":0.222197,"end_time":"2025-07-28T15:56:39.458389","exception":false,"start_time":"2025-07-28T15:56:39.236192","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n","              feature_types=None, gamma=None, grow_policy=None,\n","              importance_type=None, interaction_constraints=None,\n","              learning_rate=0.089, max_bin=None, max_cat_threshold=None,\n","              max_cat_to_onehot=None, max_delta_step=None, max_depth=3,\n","              max_leaves=None, min_child_weight=None, missing=nan,\n","              monotone_constraints=None, multi_strategy=None, n_estimators=100,\n","              n_jobs=None, num_parallel_tree=None, random_state=1, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n","              feature_types=None, gamma=None, grow_policy=None,\n","              importance_type=None, interaction_constraints=None,\n","              learning_rate=0.089, max_bin=None, max_cat_threshold=None,\n","              max_cat_to_onehot=None, max_delta_step=None, max_depth=3,\n","              max_leaves=None, min_child_weight=None, missing=nan,\n","              monotone_constraints=None, multi_strategy=None, n_estimators=100,\n","              n_jobs=None, num_parallel_tree=None, random_state=1, ...)</pre></div></div></div></div></div>"],"text/plain":["XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric='logloss',\n","              feature_types=None, gamma=None, grow_policy=None,\n","              importance_type=None, interaction_constraints=None,\n","              learning_rate=0.089, max_bin=None, max_cat_threshold=None,\n","              max_cat_to_onehot=None, max_delta_step=None, max_depth=3,\n","              max_leaves=None, min_child_weight=None, missing=nan,\n","              monotone_constraints=None, multi_strategy=None, n_estimators=100,\n","              n_jobs=None, num_parallel_tree=None, random_state=1, ...)"]},"execution_count":25,"metadata":{},"output_type":"execute_result"}],"source":["model = XGBClassifier(n_estimators=100,max_depth=3,learning_rate= 0.089,use_label_encoder=False, eval_metric='logloss',random_state=1)\n","model.fit(trainX,trainY)"]},{"cell_type":"code","execution_count":26,"id":"67415213","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:39.471404Z","iopub.status.busy":"2025-07-28T15:56:39.470777Z","iopub.status.idle":"2025-07-28T15:56:39.478353Z","shell.execute_reply":"2025-07-28T15:56:39.477897Z"},"papermill":{"duration":0.014851,"end_time":"2025-07-28T15:56:39.479612","exception":false,"start_time":"2025-07-28T15:56:39.464761","status":"completed"},"tags":[]},"outputs":[],"source":["pred = model.predict(valX)"]},{"cell_type":"code","execution_count":27,"id":"4b7692dc","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:39.494204Z","iopub.status.busy":"2025-07-28T15:56:39.494025Z","iopub.status.idle":"2025-07-28T15:56:39.500869Z","shell.execute_reply":"2025-07-28T15:56:39.500098Z"},"papermill":{"duration":0.015312,"end_time":"2025-07-28T15:56:39.501961","exception":false,"start_time":"2025-07-28T15:56:39.486649","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["percentage aabsolute error: 3.130059363194819\n"]},{"data":{"text/plain":["96.86994063680518"]},"execution_count":27,"metadata":{},"output_type":"execute_result"}],"source":["from sklearn.metrics import mean_absolute_error, accuracy_score\n"," \n","\n","e=mean_absolute_error(valY,pred)\n","print(f\"percentage aabsolute error: {e*100}\")\n","accuracy_score(valY,pred)*100"]},{"cell_type":"code","execution_count":28,"id":"5318cdcd","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:39.513973Z","iopub.status.busy":"2025-07-28T15:56:39.513771Z","iopub.status.idle":"2025-07-28T15:56:39.594164Z","shell.execute_reply":"2025-07-28T15:56:39.593708Z"},"papermill":{"duration":0.087813,"end_time":"2025-07-28T15:56:39.595414","exception":false,"start_time":"2025-07-28T15:56:39.507601","status":"completed"},"tags":[]},"outputs":[],"source":["# Fit on full training data and predict on test set\n","model.fit(imputed_train_data, y)\n","final_predictions = model.predict(imputed_test_data)"]},{"cell_type":"code","execution_count":29,"id":"ca110070","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:39.610067Z","iopub.status.busy":"2025-07-28T15:56:39.609843Z","iopub.status.idle":"2025-07-28T15:56:39.613357Z","shell.execute_reply":"2025-07-28T15:56:39.612689Z"},"papermill":{"duration":0.01178,"end_time":"2025-07-28T15:56:39.614328","exception":false,"start_time":"2025-07-28T15:56:39.602548","status":"completed"},"tags":[]},"outputs":[],"source":["# Convert predictions back to labels\n","final_labels = np.where(final_predictions == 1, 'Extrovert', 'Introvert')\n"]},{"cell_type":"code","execution_count":30,"id":"492c35d7","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:39.625881Z","iopub.status.busy":"2025-07-28T15:56:39.625637Z","iopub.status.idle":"2025-07-28T15:56:39.640974Z","shell.execute_reply":"2025-07-28T15:56:39.640434Z"},"papermill":{"duration":0.022218,"end_time":"2025-07-28T15:56:39.642052","exception":false,"start_time":"2025-07-28T15:56:39.619834","status":"completed"},"tags":[]},"outputs":[],"source":["# Prepare submission\n","output = pd.DataFrame({\n","    'id': test_data['id'],\n","    'Personality': final_labels\n","})\n","output.to_csv('submission.csv', index=False)"]},{"cell_type":"code","execution_count":31,"id":"4663a8a6","metadata":{"execution":{"iopub.execute_input":"2025-07-28T15:56:39.653786Z","iopub.status.busy":"2025-07-28T15:56:39.653578Z","iopub.status.idle":"2025-07-28T15:56:39.662049Z","shell.execute_reply":"2025-07-28T15:56:39.661455Z"},"papermill":{"duration":0.015574,"end_time":"2025-07-28T15:56:39.663074","exception":false,"start_time":"2025-07-28T15:56:39.6475","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Personality</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>18524</td>\n","      <td>Extrovert</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18525</td>\n","      <td>Introvert</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>18526</td>\n","      <td>Extrovert</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>18527</td>\n","      <td>Extrovert</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>18528</td>\n","      <td>Introvert</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      id Personality\n","0  18524   Extrovert\n","1  18525   Introvert\n","2  18526   Extrovert\n","3  18527   Extrovert\n","4  18528   Introvert"]},"execution_count":31,"metadata":{},"output_type":"execute_result"}],"source":["df = pd.read_csv(\"submission.csv\")\n","df.head()"]},{"cell_type":"code","execution_count":null,"id":"118892bd","metadata":{"papermill":{"duration":0.00639,"end_time":"2025-07-28T15:56:39.675455","exception":false,"start_time":"2025-07-28T15:56:39.669065","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"databundleVersionId":12738969,"sourceId":91718,"sourceType":"competition"}],"dockerImageVersionId":31089,"isGpuEnabled":true,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.13"},"papermill":{"default_parameters":{},"duration":24.737213,"end_time":"2025-07-28T15:56:40.198148","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-07-28T15:56:15.460935","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}